#!/usr/bin/wish

package require DeviceRole
package require Exp;  # timeplot, monitor
package require SigLoad

##########################################################################
## read parameters from configuration file

set default_pars {
  name         {Default}  {program name}
  period       {1.0}      {measurement period}
  onoff        0          {inital state of main switch}
  save         0          {inital state of save switch}

  amp  10    {pulse voltage}
  fre  32768 {pulse frequency}
  cyc  10    {pulse count}

  time 5     {record time}
  tpre 5.0   {pretrigger percent}
  fstart 3e-6 {fit starting time, s}
  rate 1e5   {record sampling rate}
  sc   1     {oscilloscope range}

  nforks 1   {number of forks}

  fadj 1     {adjust frequency}
  fmin 32000 {min value}
  fmax 33000 {max value}
  tadj 1     {adjust time}
  tmin 0.01  {min value}
  tmax 200   {max value}
  tx   5     {time factor}
  radj 0     {adjust range}
  sadj 1     {adjust sampling rate}

  del  10.0  {delay between measurements, s}
  navr  1    {number of averages}
  meas 0     {repeat measurements}

  osc_dev    {} {oscilloscope device}
  gen_dev    {} {generator device}
  db_dev     {} {database device (can be empty)}
  db_val     {} {database name for numerical values}
  db_par     {} {database name for measurement parameters}

  gauge_dev    {TEST}     {gauge device}
  db_dev       {}         {database device}
  db_name      {}         {database name}
  tpos         0.5        {timestamp position: 0-beginning of measurement, 1-end of measuremen}

  plot_maxn     0 {number of points visible on the plot}
  plot_maxt  3600 {time span of the time plot}
  sigfile  "/tmp/fork_sig.dat" {signal file}
}

if {[llength $argv]>0 } {
  read_conf [lindex $argv 0] pars $default_pars
}\
else {
  foreach {name def title} $default_pars { set pars($name) $def }
}

tk appname "fork_pulse: $pars(name)"

##########################################################################
##########################################################################
## In the interface and for real settings we use two copies of the
## parameter array: pars and apars
## After setting generator, oscilloscope or auto adjustment parameters
## use on_pars_apply to apply settings!

proc on_pars_reset {} {
  global pars apars
  array set pars [array get apars]
}
proc on_pars_apply {} {
  global pars apars need_setup
  array set apars [array get pars]
  set need_setup 1
}

on_pars_apply

##########################################################################
##########################################################################
set range_values {}; # possible values for oscilloscope range (will be autodetected later)
set need_setup 1;    # do we want to update device settings before measurements?
set gen {};          # generator device handler
set frame {};        # GUI frame (comes from Monitor)
set osc_sc_w {};     # Oscilloscope scale widget. Used in open function to update values.

# measured values
set time 0;  # system time
for {set i 0} {$i<$::pars(nforks)} {incr i} {
  set amp($i)  0;  # amplitude
  set rtau($i) 0;  # 1/relaxation time
  set fre($i)  0;  # frequency
}

# data for raw signal plot and fitted curves
blt::vector create sig_x
blt::vector create sig_y0
blt::vector create sig_xm
blt::vector create sig_ym1
blt::vector create sig_ym2

# data for fft plot
blt::vector create fft_x
blt::vector create fft_y

##########################################################################
##########################################################################
## functions for the monitor class

# Open devices
proc func_start {} {
  global pars

  # open osc_dev
  if {$pars(osc_dev) == {} } { error "osc_dev is empty" }
  Device $pars(osc_dev)
  $pars(osc_dev) lock
  if {! [regexp {^pico_rec} {*}[$pars(osc_dev) cmd *idn?]] } {
    error "unsupported osc device (pico_rec program is needed)"}

  # open gen_dev
  if {$pars(gen_dev) == {} } { error "gen_dev is empty" }
  set ::gen [DeviceRole $pars(gen_dev) burst_source]
  $::gen lock

  # Open db_dev
  if {$pars(db_dev) != {}} {
    Device $pars(db_dev)
    if {! [regexp {^Graphene database} {*}[$pars(db_dev) cmd *idn?]]} {
     error "unsupported db device (graphene is needed)"}
  }

  set range_values [lindex [$pars(osc_dev) cmd ranges A] 0]
  $::osc_sc_w configure -values $range_values
  set ::need_setup 1
}

# Close devices
proc func_stop {} {
  global pars

  $::gen unlock
  DeviceRoleDelete $::gen

  $pars(osc_dev) unlock
  DeviceDelete $pars(osc_dev)

  if {$pars(db_dev) != {}} {
    DeviceDelete $pars(db_dev)
  }
}

# Do a single measurement, return data
proc func_meas {} {
  global pars apars
  global time amp rtau fre

  # setup
  if {$::need_setup} {
    $::gen set_burst $apars(fre) $apars(amp) $apars(cyc)

    ## Oscilloscope setup:
    ## A - signal, B - trigger
    $pars(osc_dev) cmd chan_set A 1 AC $apars(sc)
    $pars(osc_dev) cmd chan_set B 1 DC 10
    $pars(osc_dev) cmd trig_set B 0.1 FALLING 0

    if {$pars(db_dev) != {} && $pars(db_par) !={} } {
      set prev [lindex [$pars(db_dev) cmd get $pars(db_par)] 0]
      if { ([lindex $prev 1] != $apars(fre)) ||\
           ([lindex $prev 2] != $apars(cyc))  ||\
           ([lindex $prev 3] != $apars(amp)) ||\
           ([lindex $prev 4] != $apars(sc)) } {
        $pars(db_dev) cmd put $pars(db_par) now $apars(fre) $apars(cyc) $apars(amp) $apars(sc)
        $pars(db_dev) cmd sync
      }
    }
    set ::need_setup 0
  }

  set t0 [clock milliseconds]
  if ($apars(tpre)<0)   { set apars(tpre) 0 }
  if ($apars(tpre)>100) { set apars(tpre) 100 }
  set t1 [expr {0.01*$apars(tpre)*$apars(time)}]
  set t2 [expr {$apars(time)-$t1}]
  set dt [expr {1.0/$apars(rate)}]

  set NP [expr {int(1.0*$t1/$dt)}]; # pretigger sample count
  set N  [expr {int(1.0*$t2/$dt)}]; # sample count

  if {$apars(navr)<1 || $apars(navr)>65536} {
    error "bad number of averages: $apars(navr)"
  }
  if {$apars(navr)> 1} {$apars(osc_dev) cmd avr_start}

  if {$apars(navr) == 1} {set fname $apars(sigfile)} else {set fname "-"}
  for {set iavr 0} {$iavr<$apars(navr)} {incr iavr} {
    $pars(osc_dev) cmd block A $NP $N $dt $fname
    $pars(gen_dev) write *TRG
    $pars(osc_dev) cmd wait
  }
  if {$apars(navr)>1} {
    $pars(osc_dev) cmd avr_save $apars(sigfile)
    $pars(osc_dev) cmd avr_stop
  }

  set ret [exec sig_filter -T $apars(fstart) -f fitn $apars(sigfile)\
           -N $pars(nforks) -F $apars(fmin) -G $apars(fmax) ]
  set ret [split $ret "\n"]


  for {set i 0} {$i<$::pars(nforks)} {incr i} {
    set line [lindex $ret $i]
    ## parse results
    set time [lindex $line 0]
    set fre($i)  [format %.6f [lindex $line 1]]
    set rtau($i) [format %.8f [lindex $line 2]]
    set amp($i)  [format %.6f [expr {1000*[lindex $line 3]}]]
  }
  set data []
  lappend data [lindex [lindex $ret 0] 0]
  for {set i 0} {$i<$::pars(nforks)} {incr i} { lappend data [lindex [lindex $ret $i] 1]}
  for {set i 0} {$i<$::pars(nforks)} {incr i} { lappend data [lindex [lindex $ret $i] 2]}
  for {set i 0} {$i<$::pars(nforks)} {incr i} { lappend data [lindex [lindex $ret $i] 3]}

  if {$pars(db_dev) != {} && $pars(db_val) !={} } {
    $pars(db_dev) cmd put $pars(db_val) {*}$data
    $pars(db_dev) cmd sync
  }

  ## push data to the time plot
  pl add_data $data

  ## load signal
  set ncols [sig_load sig $apars(sigfile)]

  global sig_x
  set min 0
  set max $sig_x(max)
  sig_xm seq $min $max [expr {($max-$min)/500}]
  sig_ym1 expr {0.5*1e-3*$amp(0)*exp(-sig_xm*$rtau(0))}
  sig_ym2 expr -sig_ym1
  ## load FFT
  set ret [exec sig_filter  -T $apars(fstart) -f fft_pow $apars(sigfile) -N 10000 -l]
  fft_x set {}
  fft_y set {}
  foreach l [split $ret "\n"] {
    fft_x append [lindex $l 0]
    fft_y append [lindex $l 1]
  }
  fft_y expr {sqrt(fft_y)*1e9}

  # todo!
  if {$fre(0)>0} {
    # todo: use max(amp), max(tau), mean(fre)
    set fre0 $fre(0)
    set rtau0 $rtau(0)
    set amp0 $amp(0)

    ## adjust frequency if needed
    if {$apars(fadj)} {
      set apars(fre) [format %.0f $fre0]
      if {$apars(fre) < $apars(fmin)} {set apars(fre) $apars(fmin)}
      if {$apars(fre) > $apars(fmax)} {set apars(fre) $apars(fmax)}
      set pars(fre) $apars(fre)
      set need_setup 1
    }
    ## adjust record time if needed
    if {$apars(tadj)} {
      set apars(time) [format %.3e [expr {$apars(tx)/$rtau0}]]
      if {$apars(time) < $apars(tmin)} {set apars(time) $apars(tmin)}
      if {$apars(time) > $apars(tmax)} {set apars(time) $apars(tmax)}
      set pars(time) $apars(time)
      set need_setup 1
    }
    ## adjust oscilloscope range if needed
    if {$apars(radj)} {
      global range_values
      foreach r $range_values {
        if {1e-3*$amp0 < 2*0.8*$r} {
          set apars(sc) $r
          set  pars(sc) $r
          set need_setup 1
          break
        }
      }
    }
    ## adjust sampling rate if needed
    if {$apars(sadj)} {
      set min_rate [expr {2*$apars(fmax)}]
      set max_rate 20e6;
      set num 1e6
      set r [expr {$num/$apars(time)}]
      if {$r > $max_rate} {set r $max_rate}
      if {$r < $min_rate} {set r $min_rate}
      set r [format {%.2e} $r]
      set apars(rate) $r
      set  pars(rate) $r
    }
  }
}

##################################################
## measurement frame

proc mk_meas_frame {root} {
  frame $root
  labelframe $root.amp -text "Amplitude, mV: "
  for {set i 0} {$i<$::pars(nforks)} {incr i} {
    label $root.amp.val$i -textvariable amp($i)  -font {-size 15} -text 0
    pack $root.amp.val$i
  }
  labelframe $root.rtau -text "1/Tau, 1/s: "
  for {set i 0} {$i<$::pars(nforks)} {incr i} {
    label $root.rtau.val$i -textvariable rtau($i)  -font {-size 15} -text 0
    pack $root.rtau.val$i
  }
  labelframe $root.fre -text "Frequency, Hz: "
  for {set i 0} {$i<$::pars(nforks)} {incr i} {
    label $root.fre.val$i -textvariable fre($i) -font {-size 15} -text 0
    pack $root.fre.val$i
  }
  pack $root.amp $root.rtau $root.fre\
    -side left -fill x -expand 1
}

##################################################
## signal plot frame

proc mk_splot_frame {root} {
  frame $root

  # make graph
  set pwid $root.p

  blt::graph $pwid -leftmargin 80
  pack $pwid -fill both -expand 1

  $pwid legend configure -activebackground white

  # configure standard xBLT things:
  xblt::plotmenu $pwid -showbutton 1 -buttonlabel Menu -menuoncanvas 0
  xblt::legmenu  $pwid -showseparator 0

  xblt::hielems $pwid
  xblt::crosshairs $pwid -show 1
  xblt::measure $pwid
  xblt::readout $pwid -variable v_readout -active 1
  xblt::zoomstack $pwid -axes {x y} -recttype xy
  $pwid element create res+ -xdata sig_xm -ydata sig_ym1 -symbol "" -color red -label ""
  $pwid element create res- -xdata sig_xm -ydata sig_ym2 -symbol "" -color red -label ""
  $pwid element create sig -xdata sig_x -ydata sig_y0 -symbol "" -color blue
  $pwid axis configure y -title {Amplitude, V}
}

##################################################
## fft frame
proc mk_fft_frame {root} {
  frame $root

  # make graph
  set pwid $root.p

  blt::graph $pwid -leftmargin 80
  pack $pwid -fill both -expand 1

  $pwid legend configure -activebackground white

  # configure standard xBLT things:
  xblt::plotmenu $pwid -showbutton 1 -buttonlabel Menu -menuoncanvas 0
  xblt::legmenu  $pwid -showseparator 0

  xblt::hielems $pwid
  xblt::crosshairs $pwid -show 1
  xblt::measure $pwid
  xblt::readout $pwid -variable v_readout -active 1
  xblt::zoomstack $pwid -axes {x y} -recttype xy
  $pwid element create fft -xdata fft_x  -ydata fft_y -symbol "" -color blue
  $pwid axis configure y -title {Spectral density, nV/sqrt(Hz)} -logscale 1
  $pwid axis configure x -title {Frequency, Hz} -logscale 1
}

##################################################
## time plot frame
proc mk_tplot_frame {root} {
  global pars
  frame $root
  set graph $root.p
  set swid $root.sb

  set pl_names []
  set pl_x {time}
  set pl_y {{}}
  for {set i 0} {$i<$::pars(nforks)} {incr i} { lappend pl_names fre-$i }
  for {set i 0} {$i<$::pars(nforks)} {incr i} { lappend pl_names rel-$i }
  for {set i 0} {$i<$::pars(nforks)} {incr i} { lappend pl_names amp-$i }
  for {set i 0} {$i<$::pars(nforks)} {incr i} {
    lappend pl_x "fre-$i"
    lappend pl_y "rel-$i"
  }

  TimePlot pl $graph\
    -ncols [expr 3*$pars(nforks)]\
    -maxn $pars(plot_maxn)\
    -maxt $pars(plot_maxt)\
    -names $pl_names\
    -plots_x {time freq}\
    -plots_y {{}   width}\
    -use_comm 0
  pack $graph -fill both -expand 1
}

##################################################
## parameters frame


proc mk_pars_frame {root} {
  frame $root

  #######################
  ## generator parameters
  set w $root.pp
  labelframe $w -text {generator parameters}\
                -font {-weight bold} -padx 5 -pady 5
  foreach {cmd v title} {
        mk_entry fre "Frequency, Hz"
        mk_entry amp "Amplitude, V"
        mk_entry cyc "Cycles"
        } {
    $cmd $w.${v} pars($v) $title
  }
  grid $w -sticky ew -padx 5 -row 1 -column 1


  #######################
  ## osc parameters
  set w $root.op
  labelframe $w -text {oscilloscope parameters}\
                -font {-weight bold} -padx 5 -pady 5
  foreach {cmd v title} {
        mk_entry time   "Record time, s"
        mk_entry tpre   "Pretrigger, %"
        mk_entry fstart "Fit starting time, s"
        mk_entry rate   "Sampling rate, Hz"
        mk_combo sc     "Range, V"
        } {
    $cmd $w.${v} pars($v) $title
  }
  set ::osc_sc_w $w.sc; # save $w.sc widget path for open function which will update values
  grid $w -sticky ew -padx 5 -row 2 -column 1

  #######################
  ## avr parameters
  set w $root.av
  labelframe $w -text {averaging}\
                -font {-weight bold} -padx 5 -pady 5
  foreach {cmd v title} {
        mk_entry navr "Number of averages"
        } {
    $cmd $w.${v} pars($v) $title
  }
  grid $w -sticky ew -padx 5 -row 3 -column 1

  #######################
  ## auto
  set w $root.ap
  labelframe $w -text {auto adjustments}\
                -font {-weight bold} -padx 5 -pady 5

  foreach {cmd v title} {
        mk_check fadj "Adjust frequency"
        mk_entry fmin "min value, Hz"
        mk_entry fmax "max value, Hz"
        mk_check tadj "Adjust record time"
        mk_entry tmin "min value, s"
        mk_entry tmax "max value, s"
        mk_entry tx   "factor"
        mk_check sadj "Adjust sampling rate"
        mk_check radj "Adjust oscilloscope range"
        } {
    $cmd $w.${v} pars($v) $title
  }
  grid $w -sticky ns -padx 5  -row 1 -column 2 -rowspan 2

  #######################
  ## buttons
  frame $root.btn
  button $root.btn.reset -text "Reset"  -command on_pars_reset
  button $root.btn.apply -text "Apply"  -command on_pars_apply
  grid $root.btn.reset $root.btn.apply  -padx 20 -pady 5
  grid $root.btn -row 3 -column 2 -sticky n
}

##################################################
# rest of the interface

proc func_mkint {w} {
  mk_meas_frame $w.meas
  pack $w.meas -fill x -expand 1

  blt::tabset $w.tabs -side top

  mk_splot_frame $w.tabs.splot
  mk_fft_frame   $w.tabs.fft
  mk_tplot_frame $w.tabs.tplot
  mk_pars_frame  $w.tabs.pars

  ## tabset
  $w.tabs insert end splot -window $w.tabs.splot\
     -anchor n -text "Signal plot" -fill both
  $w.tabs insert end fft -window $w.tabs.fft\
     -anchor n -text "FFT plot" -fill both
  $w.tabs insert end tplot -window $w.tabs.tplot\
     -anchor n -text "Time plot" -fill both
  $w.tabs insert end pars -window $w.tabs.pars\
     -anchor n -text "Parameters" -fill both

  pack $w.tabs -fill both -expand 1
}

##########################################################################
##########################################################################
## create the monitor class
Monitor m .m -name $pars(name) -period $pars(period) -onoff $pars(onoff)\
  -func_start func_start -func_stop func_stop\
  -func_meas func_meas -func_mkint func_mkint

pack .m
m startstop; # check devices, update osc range setting
wm protocol . WM_DELETE_WINDOW { m do_exit }

