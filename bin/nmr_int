#!/usr/bin/wish

## Interface for NMR

package require Device 1.2
package require xBlt 3

### parameters

# power supply devices
set pars(main,ps1)      ps0:1H;  # main power supply device 1
set pars(main,ps2)      ps0:2L;  # main power supply device 2
set pars(grad,ps)       ps0:3;   # grad power supply device
set pars(quad,ps)       ps0:4;   # quad power supply device
set pars(helm_ps)       {};      # helm power supply device

# overvoltage protection, V
set pars(main,ovp)      5
set pars(grad,ovp)      5
set pars(quad,ovp)      5
set pars(helm,ovp)      5

# ramping and idle time steps, s
set pars(main,r_tstep)  0.5
set pars(main,i_tstep)  0.5
set pars(grad,r_tstep)  1.0
set pars(grad,i_tstep)  10
set pars(quad,r_tstep)  1.0
set pars(quad,i_tstep)  10
set pars(helm,r_tstep)  1.0
set pars(helm,i_tstep)  10

# max rates, A/s
set pars(main,maxrate) 0.01
set pars(grad,maxrate) 0.01
set pars(quad,maxrate) 0.01
set pars(helm,maxrate) 0.01

# databases
#set pars(db)           db_exp;   # db device
set pars(db)           {}
set pars(main,db_val)  drydemag/sweep_main
set pars(main,db_ann)  drydemag/sweep_main_a
set pars(grad,db_val)  drydemag/sweep_grad
set pars(grad,db_ann)  drydemag/sweep_grad_a
set pars(quad,db_val)  drydemag/sweep_quad
set pars(quad,db_ann)  drydemag/sweep_quad_a
set pars(heml,db_val)  {}
set pars(heml,db_ann)  {}

# other devices
set pars(gauge,dev)     lockin0:FXY;  # gauge device
set pars(exc_gen)       gen0:1;       # excitation generator
set pars(comp_gen)      gen0:2;       # compensation generator

set pars(main,hist)          100; # history plot length, s
set pars(other,hist)         600; # history plot length, s

set name "NMR interface"

##########################################################

# create BLT vectors for data:  pars($coil,v$val)
# create current values:        vars($coil,v$val)
#
set maxlen 1000
foreach coil {main grad quad helm} {
  foreach val {T I R} {
    set pars($coil,v$val) [blt::vector create #auto]
    set vars($coil,v$val) 0
  }
}
foreach coil {main} {
  foreach val {F X Y A P} {
    set pars($coil,v$val) [blt::vector create #auto]
    set vars($coil,v$val) 0
  }
}

##########################################################
## control functions

proc do_reset_main {} { sweeper_main reset }
proc do_reset_grad {} { sweeper_grad reset }
proc do_reset_quad {} { sweeper_quad reset }
proc do_reset_helm {} { sweeper_helm reset }

## clear main plot
proc do_clear_main {} {
  global pars
  foreach coil {main} {
    foreach val {T I R F X Y A P} {
      if {[$pars($coil,v$val) length] > 0} {
        $pars($coil,v$val) delete 0:end
      }
    }
  }
}

## clear grad/quad/helm  plot
proc do_clear_other {} {
  global pars
  foreach coil {grad quad helm} {
    foreach val {T I R} {
      if {[$pars($coil,v$val) length] > 0} {
        $pars($coil,v$val) delete 0:end
      }
    }
  }
}


##########################################################
## update functions

proc on_new_val_main {t cm cs vm fre x y} {
  global name pars vars

  set t2 [clock seconds]
  set t1 [expr {$t2-$pars(main,hist)}]

  set vT $pars(main,vT)
  # remove old data if needed
  if {  [$vT length]>0 &&\
        [$vT index end] - [$vT index 0] > 1.2*$pars(main,hist)} {
    set i 0
    for {set i 0} {$i<[$vT length]} {incr i} {
      if {[$vT index $i]>=$t1} {break}
    }
    if {$i>0} {
      foreach val {T I R F X Y A P} {
        $pars(main,v$val) delete 0:$i
      }
    }
  }
  set vars(main,vT) $t
  set vars(main,vI) $cm
  set vars(main,vR) [expr { $cm>0? $vm/$cm:0} ]
  set vars(main,vF) $fre
  set vars(main,vX) $x
  set vars(main,vY) $y
  set vars(main,vA) [expr hypot($y,$x)]
  set vars(main,vP) [expr atan2($y,$x)]

  foreach val {T I R F X Y A P} {
    $pars(main,v$val) append $vars(main,v$val)
  }

#  .name configure -text "$name: [format %5.3f $cm] A"
}

##########################################################
proc on_new_val_other {coil t cm cs vm} {
  global name pars vars

  set t2 [clock seconds]
  set t1 [expr {$t2-$pars(other,hist)}]

  set vT $pars($coil,vT)

  # remove old data if needed
  if {  [$vT length]>0 &&\
        [$vT index end] - [$vT index 0] > 1.2*$pars(other,hist)} {
    set i 0
    for {set i 0} {$i<[$vT length]} {incr i} {
      if {[$vT index $i]>=$t1} {break}
    }
    if {$i>0} {
      foreach val {T I R} {
        $pars($coil,v$val) delete 0:$i
      }
    }
  }

  set vars($coil,vT) $t
  set vars($coil,vI) $cm
  set vars($coil,vR) [expr { $cm>0? $vm/$cm:0} ]

  foreach val {T I R} {
    $pars($coil,v$val) append $vars($coil,v$val)
  }

#  .name configure -text "$name: [format %5.3f $cm] A"
}



##########################################################
## make interface

# main NMR plot frame
proc mk_main_plot {root} {
  global pars

  frame $root
  ######################
  # program title
  label $root.name  -text "NMR" -font {-size 20}
  pack $root.name

  ######################
  # buttons
  frame $root.f
  button $root.f.go_up   -text "Connect HS"   -command go_up
  button $root.f.go_down -text "Discnnect HS" -command go_down
  grid $root.f.go_up $root.f.go_down
  pack $root.f

  ######################
  # make graph
  set pwid $root.p
  set swid $root.s

  blt::graph $pwid -leftmargin 80
  pack $pwid -fill both -expand 1

  scrollbar $swid -orient horizontal
  pack $swid -fill x

  $pwid legend configure -activebackground white

  # configure standard xBLT things:
  xblt::plotmenu   $pwid -showbutton 1 -buttonlabel Menu -menuoncanvas 0
  xblt::legmenu    $pwid -showseparator 0
  xblt::hielems    $pwid
  xblt::crosshairs $pwid -show 1
  xblt::measure    $pwid
  xblt::readout    $pwid -variable v_readout -active 1
  xblt::zoomstack  $pwid -scrollbutton 2 -axes x -recttype x
  xblt::elemop     $pwid
  xblt::scroll     $pwid $swid -timefmt 1
  xblt::xcomments  $pwid

  foreach coil {main} {
    foreach val {I R X Y A P} color {red blue green magenta darkcyan green } {
      set n ${coil}:${val}
      $pwid axis create $n -title "$n"  -titlecolor black
      $pwid element create $n -xdata $pars($coil,vT) -ydata $pars($coil,v$val) -mapy $n\
        -symbol "circle" -pixels 2  -color $color

      $pwid element bind $n <Enter> [list $pwid yaxis use $n]
    }
  }

  ######################
  # exit button
  button $root.clear -text "Clear plot"  -command do_clear_main
  button $root.reset -text "Reset device"  -command do_reset_main
  pack  $root.clear $root.reset -side right

}

# main Other Coils plot frame
proc mk_other_plot {root} {
  global pars vars

  frame $root

  foreach coil {grad quad helm} title {Gradient Quadratic Helmholtz} {
    labelframe $root.$coil -text "$title coil:"
    label $root.$coil.lI -text "Current:" -font {-size 14}
    label $root.$coil.vI -textvariable ::vars($coil,vI) -font {-size 14}
    grid $root.$coil.lI $root.$coil.vI -sticky w
    label $root.$coil.lR -text "Resistance:" -font {-size 14}
    label $root.$coil.vR -textvariable ::vars($coil,vR) -font {-size 14}
    grid $root.$coil.lR $root.$coil.vR -sticky w
    pack $root.$coil -fill x -expand 1
  }


  ######################
  # program title
  label $root.name  -text "Other coils" -font {-size 20}
  pack $root.name

  ######################
  # buttons
  frame $root.f
  button $root.f.go_up   -text "Connect HS"   -command go_up
  button $root.f.go_down -text "Discnnect HS" -command go_down
  grid $root.f.go_up $root.f.go_down
  pack $root.f

  ######################
  # make graph
  set pwid $root.p
  set swid $root.s

  blt::graph $pwid -leftmargin 80
  pack $pwid -fill both -expand 1

  scrollbar $swid -orient horizontal
  pack $swid -fill x

  $pwid legend configure -activebackground white

  # configure standard xBLT things:
  xblt::plotmenu   $pwid -showbutton 1 -buttonlabel Menu -menuoncanvas 0
  xblt::legmenu    $pwid -showseparator 0
  xblt::hielems    $pwid
  xblt::crosshairs $pwid -show 1
  xblt::measure    $pwid
  xblt::readout    $pwid -variable v_readout -active 1
  xblt::zoomstack  $pwid -scrollbutton 2 -axes x -recttype x
  xblt::elemop     $pwid
  xblt::scroll     $pwid $swid -timefmt 1
  xblt::xcomments  $pwid

  foreach coil {grad quad helm} color {red blue magenta} {
    foreach val {I} {
      set n ${coil}:${val}
      $pwid axis create $n -title "$n"  -titlecolor black
      $pwid element create $n -xdata $pars($coil,vT) -ydata $pars($coil,v$val) -mapy $n\
        -symbol "circle" -pixels 2  -color $color

      $pwid element bind $n <Enter> [list $pwid yaxis use $n]
    }
  }

  ######################
  # exit button
  button $root.clear -text "Clear plot"  -command do_clear_other
  button $root.reset -text "Reset device"  -command do_reset_other
  pack  $root.clear $root.reset -side right

}



blt::tabset .tabs -side top

mk_main_plot {.tabs.mplot}
.tabs insert end mplot -window .tabs.mplot\
   -anchor n -text "Main Coil" -fill both

mk_other_plot {.tabs.oplot}
.tabs insert end oplot -window .tabs.oplot\
   -anchor n -text "Other Coils" -fill both

pack .tabs -fill both -expand 1

## status line on the bottom
label .st -textvariable st
button .exit -text "Exit" -command exit
pack .exit -side left -padx 10
pack .st   -side left -padx 10 -fill x


##########################################################

update

## build sweeper object
source /usr/bin/sweeper.tcl

SweepController main_sweeper\
  -ps_dev1    $pars(main,ps1)\
  -ps_dev2    $pars(main,ps2)\
  -gauge      $pars(gauge,dev)\
  -db_dev     $pars(db)\
  -db_val     $pars(main,db_val)\
  -db_ann     $pars(main,db_ann)\
  -max_volt   $pars(main,ovp)\
  -max_rate   $pars(main,maxrate)\
  -ramp_tstep $pars(main,r_tstep)\
  -idle_tstep $pars(main,i_tstep)\
  -on_new_val on_new_val_main\
  -on_new_com {}

SweepController grad_sweeper\
  -ps_dev1    $pars(grad,ps)\
  -ps_dev2    {}\
  -gauge      {}\
  -db_dev     $pars(db)\
  -db_val     $pars(grad,db_val)\
  -db_ann     $pars(grad,db_ann)\
  -max_volt   $pars(grad,ovp)\
  -max_rate   $pars(grad,maxrate)\
  -ramp_tstep $pars(grad,r_tstep)\
  -idle_tstep $pars(grad,i_tstep)\
  -on_new_val "on_new_val_other grad"\
  -on_new_com {}

SweepController quad_sweeper\
  -ps_dev1    $pars(quad,ps)\
  -ps_dev2    {}\
  -gauge      {}\
  -db_dev     $pars(db)\
  -db_val     $pars(quad,db_val)\
  -db_ann     $pars(quad,db_ann)\
  -max_volt   $pars(quad,ovp)\
  -max_rate   $pars(quad,maxrate)\
  -ramp_tstep $pars(quad,r_tstep)\
  -idle_tstep $pars(quad,i_tstep)\
  -on_new_val "on_new_val_other quad"\
  -on_new_com {}


