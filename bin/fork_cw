#!/usr/bin/wish

# New inrterface for CW measurements of tuning forks, vibrating wires and similar
# resonators.

# Result database:
# - drive [generator setting]
# - 

package require DeviceRole
package require Exp;  # timeplot, monitor

##########################################################################
## Read parameters from configuration file.
## Devault values can be used for testing, without any devices.

set default_pars {
  name         {fork_cw}  {program name}
  lockin_dev   {TEST}     {lock-in device}
  lockin_pars  {TEST}     {lock-in device parameters}
  gen_dev      {TEST}     {generator device}
  db_dev       {}         {database device}
  res_db       {}         {fit result database}
  sweep_db     {}         {sweep database (record all measured points: T, F,X,Y)}
  pars_db      {}         {sweep parameters database (record sweep parameters: T0, dT, vmin, vmax, npts, dt, dtf, dir, volt, ph)}
  limit_fmin   {0}        {sweep low limit}
  limit_fmax   {inf}      {sweep high limit}
  fmin         {600}      {starting value for sweep low end}
  fmax         {1500}     {starting value for sweep high end}
  npts         {101}      {starting value for sweep number of points}
  dt           {0.1}      {starting value for measurement period}
  dtf          {1}        {starting value for first point delay}
  mode         {Both}     {starting value for sweeping mode}
  swap_xy      {0}        {swap x and y values (do it if fit gives negative width)}
  error_limit  {0.1}      {skip fit result if RMS point deviation divided by amplitude > error_limit}
  tfmt         {%H:%M:%S} {time format string for the interface}
  amp_fmt      {%.3e}     {amp format string for the interface}
  fre_fmt      {%.3f}     {fre format string for the interface}
  wid_fmt      {%.3f}     {wid format string for the interface}
  drv_fmt      {%.3f}     {drive format string for adjustments}
  ph_fmt       {%.1f}     {phase format string for the interface}
  vertical     0          {vertical design of the intereface}
  geometry     {}         {set initial window geometry}
  plot_maxt    {600}      {timeplot span}
  lin_offs     {0}        {Fit with constant/linear offset, 0|1}
  adj_freq     {0}        {adjust central frequency, 0|1}
  adj_fspan    {0}        {adjust frequency span, 0|1}
  adj_fmin     {0}        {min frequency limit for adjustment}
  adj_fmax     {10000}    {max frequency limit for adjustment}
  adj_drive    {0}        {adjust drive, 0|1}
  adj_dmin     {0.02}     {min limit for drive adjustment}
  adj_dmax     {20.0}     {max limit for drive adjustment}
  adj_time     {0}        {adjust timings, 0|1}
  adj_tmin     {0.5}      {min limit for time adjustment}
  adj_tmax     {20.0}     {max limit for time adjustment}
  adj_phase    {0}        {adjust phase, 0|1}
  fspan_size   {6}        {frequency span / width}
  amp_target   {1}        {amplitude target}
  meas_mode    {sweep}    {sweeps/track}
  track_period {0.5}      {track period, s} 
  track_del    {10}       {initial delay for track mode, s}
  track_adjf   {0}        {adjust frequency in tracking mode 0|1}
  track_adja   {0}        {adjust amplitude in tracking mode 0|1}
  track_adjfv  {1}        {adjust frequency strength 0..1}
  track_skip   {0}        {skip bad points (|f-f0|/df > k)}

  track_ampsw  {0}        {do we do an amp sweep?}
  track_amp_d  {0}        {direction of amp sweep, -1,0,+1}
  track_amp_mx {10}       {max value for amp sweep, V}
  track_amp_mn {0}        {min value for amp sweep, V}
  track_amp_f0 {0}        {frequency to return after sweep}
  track_amp_s  {0.02}     {step for amp sweep, V}
  bg6x         {}         {bg parameters for x}
  bg6y         {}         {bg parameters for y}
}

# Background data
# Fx(x) = (a1 + b1*x + c1*x**2 + d1*x**3)/((x**2-f1**2)**2 + (g1*x)**2)
# Fy(x) = (a2 + b2*x + c2*x**2 + d2*x**3)/((x**2-f1**2)**2 + (g1*x)**2)
# bg6x: [a1,b1,c1,d1,f1,g1]
# bg6y: [a2,b2,c2,d2,f2,g2]
# x in kHz, Fx, Fy in uV for 1V drive


if {[llength $argv]>0 } {
  read_conf [lindex $argv 0] pars $default_pars
}\
else {
  foreach {name def title} $default_pars { set pars($name) $def }
}

# fit result
array unset fitres
# saved fit result for tracking mode
array unset fitres_tr
# values formatted for interface
array unset iface

tk appname "$pars(name)"

##########################################################################
##########################################################################

# DeviceRole objects
set lockin [DeviceRole $pars(lockin_dev) lock-in {*}$pars(lockin_pars)];
set gen [DeviceRole $pars(gen_dev) ac_source];
if {$pars(db_dev)!={}} { Device $pars(db_dev) }


##########################################################################

# blt vectors for fit result
blt::vector create fitf
blt::vector create fitx
blt::vector create fity
blt::vector create oldf
blt::vector create oldx
blt::vector create oldy
blt::vector create basef
blt::vector create basex
blt::vector create basey

##########################################################################
# This function is executed in the beginning of each step.
# Here we get new frequncy and delay from sweeper and change
# generator frequency.
proc func_meas {} {
  global pars


  sweep_pan do_step

  if {$pars(meas_mode) eq "track"} { return }
  if {$pars(meas_mode) ne "sweep"} {error "unknown meas_mode value: $pars(meas_mode)"}

  # set generator panel to readonly state when sweeper is active
  #$::gen readonly [sweep_pan is_on]

  # set generator frequency
  if {[sweep_pan is_on] } {
    $::gen set_freq [sweep_pan get_val]
  }

  # set monitor period
  mon set_period [sweep_pan get_delay]
}

##########################################################################
# This function is executed after the delay, just before
# the next step. Here we measure the new value and collect data.
proc func_meas_e {} {
  global pars
  global fitres

  ####################
  if {$pars(meas_mode) eq "sweep"} {
    if {[sweep_pan is_first]} { tplot_sweep clear }
    if {[sweep_pan is_cancelled]} {return}
  }

  ####################
  # do the measurement
  set t     [expr [clock microsecond]/1e6]
  set f     [$::gen get_freq]
  set drive [$::gen get_volt]

  set v [$::lockin get]
  if {$pars(swap_xy)} {
    set x [lindex $v 1]
    set y [lindex $v 0]
  } else {
    set x [lindex $v 0]
    set y [lindex $v 1]
  }


  # in the test mpde we generate some fake data
  if {$pars(lockin_dev) eq "TEST"} {
    set f0 1024
    set df 64
    set F [$::gen get_volt]
    set N 1e-7
    set L 1e-5
    set OffX [expr {$F/($f*$df)*(0.1 + ($f-$f0)/$f0*0.05)}]
    set OffY [expr {$F/($f*$df)*(0.2 + ($f-$f0)/$f0*0.02)}]
    # Random number with normal distribution (see Muller_transform):
    set N [expr $N*sqrt(-2.0 * log(rand()))*cos(2*3.1415926*rand())]
    set x [expr {$N + $OffX + $F*($f*$df)/(($f0**2-$f**2)**2 + ($f*$df)**2)}]
    set y [expr {$N + $OffY + $F*($f0**2-$f**2)/(($f0**2-$f**2)**2 + ($f*$df)**2)}]
    if {$x>+$L} {set x +$L}
    if {$x<-$L} {set x -$L}
    if {$y>+$L} {set y +$L}
    if {$y<-$L} {set y -$L}
  }

  # tracking/sweep mode:
  if {$pars(meas_mode) eq "track"} {
    process_track_data $drive $t $f $x $y
  }\
  else {
    if {[sweep_pan is_on]} {
      tplot_sweep add_data [list $t $f $x $y]
    }
    if {[sweep_pan is_last] } {
      process_sweep_data
    }
  }
}

##########################################################################
# load sweep settings from the database
proc load_pars {} {
  global pars fitres
  if {$pars(db_dev)=={}} {error "No database"}

  # load last sweep parameters
  if {$pars(pars_db)!={}} {
    set last [lindex [$pars(db_dev) cmd get_prev $pars(pars_db)] 0]
    sweep_pan set_vmin [lindex $last 2]
    sweep_pan set_vmax [lindex $last 3]
    sweep_pan set_npts [lindex $last 4]
    sweep_pan set_dt   [lindex $last 5]
    sweep_pan set_dtf  [lindex $last 6]
  }

  # load last fit result
  if {$pars(res_db)!={}} {
    set last [lindex [$pars(db_dev) cmd get_prev $pars(res_db)] 0]
    set i 1
    foreach n {drive err A Ae B Be C Ce D De f0 f0e df dfe E Ee F Fe} {
      set fitres($n) [lindex $last $i]
      incr i
    }
    update_fitres
    update_interface_values
  }
}

# check if background setting is correct: two 0-size arrays or
# two 6-number arrays. Return 0 if there is no bag setting, 1 overwise.
proc check_base {} {
  global pars
  if {[llength $pars(bg6x)] == 0 && [llength $pars(bg6y)] == 0} { return 0 };

  if {[llength $pars(bg6x)] != 6 || [llength $pars(bg6y)] != 6} {
    error {"wrong background setting, 6 values for x and y expected"} }
  return 1
}

# Add base to blt vector.
# Return 0 if there is no bag setting, 1 overwise.
proc add_base {vec vecf drive xy} {
  global pars
  if {[check_base] == 0} {return 0}

  set A [lindex $pars(bg6$xy) 0]
  set B [lindex $pars(bg6$xy) 1]
  set C [lindex $pars(bg6$xy) 2]
  set D [lindex $pars(bg6$xy) 3]
  set F [lindex $pars(bg6$xy) 4]
  set G [lindex $pars(bg6$xy) 5]
  puts stderr "$pars(bg6$xy) -- $A -- $B"
  puts stderr "$vec -- $vecf"
  $vec expr {$vec + $drive*1e-6*($A+$B*$vecf*1e-3+$C*$vecf^2*1e-6+$D*$vecf^3*1e-9)/(($vecf^2*1e-6-$F^2)^2 + ($G*$vecf*1e-3)^2)}
  return 1
}

# get background (x, y) for frequency f
proc get_base {f drive} {
  global pars
  if {[check_base] == 0} {return {}}
  set ret {}
  foreach xy {x y} {
    set A [lindex $pars(bg6$xy) 0]
    set B [lindex $pars(bg6$xy) 1]
    set C [lindex $pars(bg6$xy) 2]
    set D [lindex $pars(bg6$xy) 3]
    set F [lindex $pars(bg6$xy) 4]
    set G [lindex $pars(bg6$xy) 5]
    lappend ret [expr {$drive*1e-6*($A+$B*$f*1e-3+$C*$f**2*1e-6+$D*$f**3*1e-9)/(($f**2*1e-6-$F**2)**2 + ($G*$f*1e-3)**2)}]
  }
  return $ret
}

##########################################################################
# process point in the tracking mode
proc process_track_data {drive t f x y} {
  global pars
  global fitres
  global fitres_tr

  # If drive has changed, rescale resonance parameters
  set k [expr {$drive/$fitres_tr(drive)}]
  set fitres(A) [expr {$k*$fitres_tr(A)}]
  set fitres(B) [expr {$k*$fitres_tr(B)}]
  set fitres(C) [expr {$k*$fitres_tr(C)}]
  set fitres(D) [expr {$k*$fitres_tr(D)}]
  set fitres(E) [expr {$k*$fitres_tr(E)}]
  set fitres(F) [expr {$k*$fitres_tr(F)}]
  set fitres(Ae) 0
  set fitres(Be) 0
  set fitres(Ce) 0
  set fitres(De) 0
  set fitres(Ee) 0
  set fitres(Fe) 0
  set fitres(drive) $drive

  # values w/o pre-measured background
  set base [get_base $f $drive]
  set x1 $x
  set y1 $y
  if {[llength $base] == 2} {
    set x1 [expr {$x - [lindex $base 0]}]
    set y1 [expr {$y - [lindex $base 1]}]
  }

  # Values without fitted baseline
  # Linear background is calculated from original fitres_tr(f0))!
  set x2 [expr {$x1 - $fitres(A) - $fitres(E)*($f-$fitres_tr(f0))}]
  set y2 [expr {$y1 - $fitres(B) - $fitres(F)*($f-$fitres_tr(f0))}]

  # calculate new f0 and df
  # x + iy = (C + iD)/(f0^2 - f^2 + 1i*f*df)
  # f0^2 = f^2 + Re[(C + iD)/(x + iy)] = f^2 + (C*x + D*y)/(x^2 + y^2)
  # df  = Im[(C + iD)/(x + iy)]/f      = 1/f * (D*x - C*y)/(x^2 + y^2)

  set fitres(f0) [expr {sqrt($f**2 + ($fitres(C)*$x2 + $fitres(D)*$y2)/($x2**2+$y2**2))}]
  set fitres(df) [expr {($fitres(D)*$x2 - $fitres(C)*$y2)/($x2**2+$y2**2)/$f}]
  set fitres(f0e) 0
  set fitres(dfe) 0

  # adjust frequency-dependent baseline:
  # A + E*(f-f0) = An + E*(f-f0n)
  # B + F*(f-f0) = Bn + F*(f-f0n)
  # An = A + E*(f0n-f0)
  # Bn = B + F*(f0n-f0)
  set fitres(A) [expr {$fitres(A) + $fitres(E)*($fitres(f0)-$fitres_tr(f0))}]
  set fitres(B) [expr {$fitres(B) + $fitres(F)*($fitres(f0)-$fitres_tr(f0))}]

  update_fitres

  # voltage components parallel and perpendicular to the force C+iD
  set x3 [expr {($fitres(C)*$x2 + $fitres(D)*$y2)/sqrt($fitres(C)**2 + $fitres(D)**2)}]
  set y3 [expr {($fitres(C)*$y2 - $fitres(D)*$x2)/sqrt($fitres(C)**2 + $fitres(D)**2)}]
  set ff0 [expr {$f - $fitres(f0)}]

  # skip point if needed
  set point_skipped 1
  if {$pars(track_skip)==0 || abs($ff0/$df) < $pars(track_skip)} {
    set point_skipped 0

    tplot_res add_data [list $t $fitres(df) $fitres(f0) $fitres(amp)]

    # format values for interface
    update_interface_values

    set ::track_x [format "%.3e" $x3]
    set ::track_y [format "%.3e" $y3]
    set ::track_ff0 [format "%.5f" $ff0]


    # put values into database
    if {$pars(db_dev) != {} && $pars(res_db) != {}} {
      set res [list $t $drive]
      foreach n {err A Ae B Be C Ce D De f0 f0e df dfe E Ee F Fe} {
        lappend res $fitres($n)
      }
      lappend res $x3 $y3 $ff0
      $pars(db_dev) cmd put $pars(res_db) {*}$res
    }

    # put sweep data in the database
    if {$pars(db_dev) != {} && $pars(sweep_db) != {}} {
      set xylist [list $x $y]
      if {[llength $base] == 2} {
        lappend xylist $x1 $y1
      }
      $pars(db_dev) cmd put $pars(sweep_db) $t $f {*}$xylist
    }
  }

  # adjust generator frequency
  if {$pars(track_adjf)} {
    set k  $pars(track_adjfv)
    if ($k<0) {set k 0}
    if ($k>1) {set k 1}
    set fa [expr $fitres(f0)*$k + $f*(1-$k)]
    $::gen set_freq $fa
  }

  # adjust drive
  set new_drive 0
  if {$pars(track_adja) && $pars(track_ampsw) == 0} {
    set new_drive [expr $drive * $fitres_tr(amp)/$fitres(amp)]
  }

  # is amp sweep is needed:
  if {$pars(track_ampsw) && $pars(track_amp_d) > 0} {
    set new_drive [expr $drive + $pars(track_amp_s)]
    if {$new_drive > $pars(track_amp_mx)} {
      set new_drive $pars(track_amp_mx)
      set pars(track_amp_d) -1
    }
  }\
  elseif {$pars(track_ampsw) && $pars(track_amp_d) < 0} {
    set new_drive [expr $drive - $pars(track_amp_s)]
    if {$new_drive < $pars(track_amp_mn)} {
      set new_drive $pars(track_amp_mn)
      set pars(track_amp_d) 0
      set pars(track_ampsw) 0
    }
  }
  if {$new_drive > 0 && !$point_skipped} {
    $::gen set_volt $new_drive
  }
}

##########################################################################
# get sweep data, do fit, put values to databases.
proc process_sweep_data {} {

  global pars
  #puts "stop sweep"

  # get data from timeplot (BLT-vectors):
  set tv [tplot_sweep get_tvec]
  set fv [tplot_sweep get_dvec 0]
  set xv [tplot_sweep get_dvec 1]
  set yv [tplot_sweep get_dvec 2]
  set drive [$::gen get_volt]
  set phase [$::gen get_phase]

  # baseline
  basef expr $fv
  basex expr basef*0
  basey expr basef*0
  add_base basex basef $drive x
  add_base basey basef $drive y
  set has_base [check_base]

  # put sweep data in the database
  if {$pars(db_dev) != {} && $pars(sweep_db) != {}} {
    for {set i 0} {$i < [$tv length]} {incr i} {
      set xylist [list  [$xv index $i] [$yv index $i] ]
      if {$has_base} {
        lappend xylist [expr {[$xv index $i] - [basex index $i]}]
        lappend xylist [expr {[$yv index $i] - [basey index $i]}]
      }
      $pars(db_dev) cmd put $pars(sweep_db) [$tv index $i] [$fv index $i] {*}$xylist
    }
  }

  # put sweep parameters in the database
  if {$pars(db_dev) != {} && $pars(pars_db) != {}} {
    set t0 [$tv index 0]
    set dt [expr [$tv index end] - [$tv index 0]]
    $pars(db_dev) cmd put $pars(pars_db) $t0 $dt\
      [sweep_pan get_vmin] [sweep_pan get_vmax] [sweep_pan get_npts]\
      [sweep_pan get_dt] [sweep_pan get_dtf] [sweep_pan get_dir]\
      $drive $phase
  }

  ##


  # do fit
  set npars [expr {$pars(lin_offs)? "--pars 8":"--pars 6"}]
  set conn [open "| fit_res $npars" RDWR]
  fconfigure $conn -blocking true -buffering line
  for {set i 0} {$i < [$tv length]} {incr i} {
    set xx [expr {[$xv index $i] - [basex index $i]}]
    set yy [expr {[$yv index $i] - [basey index $i]}]
    puts $conn "[$tv index $i] [$fv index $i] $xx $yy"
  }
  close $conn write
  set res [gets $conn]
  close $conn

  # result, 14 values:
  global fitres
  array unset fitres
  foreach n {T err A Ae B Be C Ce D De f0 f0e df dfe E Ee F Fe} v $res {
    if {$v == {}} {set v 0}
    set fitres($n) $v
  }
  set fitres(drive) $drive
  update_fitres

  # format values for interface
  update_interface_values

  # update plot
  set G [tplot_sweep get_graph]

  # delete previous fits
  if {[$G element names fitx] != {}} {$G element delete fitx}
  if {[$G element names fity] != {}} {$G element delete fity}
  if {[$G element names oldx] != {}} {$G element delete oldx}
  if {[$G element names oldy] != {}} {$G element delete oldy}
  if {[$G element names basex] != {}} {$G element delete basex}
  if {[$G element names basey] != {}} {$G element delete basey}

  # add new fits
  set f1 [$fv index 0]
  set f2 [$fv index end]
  fitf seq $f1 $f2 [expr ($f2-$f1)/1024]
  fitx expr {$fitres(A) + ($fitres(C)*($fitres(f0)^2-fitf^2)+$fitres(D)*(fitf*$fitres(df)))/(($fitres(f0)^2-fitf^2)^2 + (fitf*$fitres(df))^2) + $fitres(E)*(fitf-$fitres(f0))}
  fity expr {$fitres(B) + ($fitres(D)*($fitres(f0)^2-fitf^2)-$fitres(C)*(fitf*$fitres(df)))/(($fitres(f0)^2-fitf^2)^2 + (fitf*$fitres(df))^2) + $fitres(F)*(fitf-$fitres(f0))}

  add_base fitx fitf $drive x
  add_base fity fitf $drive y

  $G element create fitx -outline black -mapx xF -mapy y\
     -xdata fitf -ydata fitx -symbol {}
  $G element create fity -outline black -mapx xF -mapy y\
     -xdata fitf -ydata fity -symbol {}

  # add baseline
  if {[llength $pars(bg6x)] == 6} {
    $G element create basex -color red -mapx xF -mapy y\
     -xdata basef -ydata basex -symbol {}
  }
  if {[llength $pars(bg6y)] == 6} {
    $G element create basey -color blue -mapx xF -mapy y\
       -xdata basef -ydata basey -symbol {}
  }

  # add new data
  oldf expr $fv
  oldx expr $xv
  oldy expr $yv
  $G element create oldx -color #FF8080 -pixel 1.5 -mapx xF -mapy y\
     -xdata oldf -ydata oldx -symbol circle
  $G element create oldy -color #8080FF -pixel 1.5 -mapx xF -mapy y\
     -xdata oldf -ydata oldy -symbol circle

  # skip bad fits
  if {$fitres(err)/$fitres(amp) > $pars(error_limit)} {
    error "Bad fit: [expr $fitres(err)/$fitres(amp)]"}

  # values for result time plot
  tplot_res add_data [list $fitres(T) $fitres(df) $fitres(f0) $fitres(amp)]

  # put values into database
  if {$pars(db_dev) != {} && $pars(res_db) != {}} {
    $pars(db_dev) cmd put $pars(res_db) $fitres(T) $drive [lrange $res 1 end]
  }

  # Adjust sweep parameters.
  adjust_sweep_pars
}

##########################################################################
# do adjustments after fitting data
proc adjust_sweep_pars {} {

  global pars
  global fitres

  # Note that sweep_pan set interface values which are validated
  # and applied on the next step.

  if {$pars(adj_freq) || $pars(adj_fspan)} {
    set f1 [sweep_pan get_vmin]
    set f2 [sweep_pan get_vmax]

    if {$pars(adj_freq)} {
      set sh [expr $fitres(f0)-($f1+$f2)/2.0]
      set f1 [expr $f1+$sh]
      set f2 [expr $f2+$sh]
    }

    if {$pars(adj_fspan)} {
      set fcnt [expr ($f1+$f2)/2.0]
      set span [expr abs($fitres(df)*$pars(fspan_size))]
      set f1 [expr $fcnt - $span/2.0]
      set f2 [expr $fcnt + $span/2.0]
    }

    set span [expr abs($f2-$f1)]
    if {$f2 < $f1 } {
      set f1 $f2
      set f2 [expr $f1+$span]
    }
    if {$f1 < $pars(adj_fmin) } {
      set f1 $pars(adj_fmin)
      set f2 [expr $f1+$span]
    }
    if {$f2 > $pars(adj_fmax) } {
      set f2 $pars(adj_fmax)
      set f1 [expr $f2-$span]
    }
    if {$f1 < $pars(adj_fmin) } {
      set f1 $pars(adj_fmin)
    }
    if {$f2 > $pars(adj_fmax) } {
      set f2 $pars(adj_fmax)
    }
    sweep_pan set_vmin [format $pars(fre_fmt) $f1]
    sweep_pan set_vmax [format $pars(fre_fmt) $f2]
  }

  if {$pars(adj_drive)} {
    set v [$::gen get_volt]
    set v [format $pars(drv_fmt) [expr $v*$pars(amp_target)/$fitres(amp)]]
    if {$v > $pars(adj_dmax) } {set v $pars(adj_dmax)}
    if {$v < $pars(adj_dmin) } {set v $pars(adj_dmin)}
    $::gen set_volt $v
  }\
  else {
    set pars(amp_target) [format %.4e $fitres(amp)]
  }

  if {$pars(adj_time)} {
    set dt1  [expr 1.0/abs($fitres(df))]
    set dt2  [$::lockin get_tconst]
    set dt [expr 3.0*max($dt1,$dt2)]
    if {$dt > $pars(adj_tmax) } {set dt $pars(adj_tmax)}
    if {$dt < $pars(adj_tmin) } {set dt $pars(adj_tmin)}
    set dtf [expr {[sweep_pan get_mode] eq "Both"? $dt : 10*$dt}]
    sweep_pan set_dt   [format %.3f $dt]
    sweep_pan set_dtf  [format %.3f $dtf]
  }

  if {$pars(adj_phase)} {
    set p [$::gen get_phase]
    set p [expr {$p + $fitres(ph)}]
    $::gen set_phase [format %.2f $p]
  }
}

# Update amp and ph in fitres array
proc update_fitres {} {
  global fitres
  if {$fitres(f0) != 0 || $fitres(df) != 0} {
    set fitres(amp) [expr {abs(hypot($fitres(C),$fitres(D))/$fitres(f0)/$fitres(df))}]
  }
  set fitres(ph) [expr {180/3.1415926*atan2($fitres(C),$fitres(D))}]
}

# Values in the interface are not directly mapped
# to measured parameters. Some formatting is used instead.
proc update_interface_values {} {
  global pars fitres iface
  set iface(fre) [format $pars(fre_fmt) $fitres(f0)]
  set iface(wid) [format $pars(wid_fmt) $fitres(df)]
  set iface(amp) [format $pars(amp_fmt) $fitres(amp)]
  set iface(ph)  [format $pars(ph_fmt)  $fitres(ph)]
}

######################################################################
######################################################################
### GUI
# top frame with measurement results
proc mk_frame_top {w} {
  frame $w

  labelframe $w.fre -text {Frequency [Hz]}
  label $w.fre.val -textvariable iface(fre) -font {-size 15} -text 0
  pack $w.fre.val

  labelframe $w.wid -text {Width [Hz]}
  label $w.wid.val -textvariable iface(wid)  -font {-size 15} -text 0
  pack $w.wid.val

  labelframe $w.amp -text {Amplitude [Vrms]}
  label $w.amp.val -textvariable iface(amp)  -font {-size 15} -text 0
  pack $w.amp.val

  labelframe $w.ph -text {Phase [deg]}
  label $w.ph.val -textvariable iface(ph)  -font {-size 15} -text 0
  pack $w.ph.val

  pack $w.fre $w.wid $w.amp $w.ph -side left -fill x -expand 1
}

# measurement type frame (sweeps/adjust_pars tabset)
proc mk_frame_meas_tabs {w} {
  global pars

  blt::tabset $w

  set f $w.sweeps
  frame $f
  $w insert end sweeps -window $f\
     -anchor n -text "Sweeps" -fill both -padx 3 -pady 3

  # sweep panel
  widget_sweep sweep_pan $f.sw\
    -title "Sweeps:"\
    -vmin_label "F1" -vmax_label "F2"\
    -vmin $pars(fmin) -vmax $pars(fmax)\
    -limit_min $pars(limit_fmin)\
    -limit_max $pars(limit_fmax)\
    -npts $pars(npts)\
    -mode $pars(mode)\
    -dt   $pars(dt)\
    -dtf  $pars(dtf)\
    -cmd_start on_track_stop\
    -cmd_stop  on_track_stop

  pack $f.sw -expand 0 -fill x -anchor ne
  widget_bg $f.sw #E0F0F0

  # adjust panel
  labelframe $f.adj -text "Fit and Adjust:" -font {-weight bold -size 10}
  checkbutton $f.adj.lof -text "Use linear offsets in the fit" -variable pars(lin_offs)
  checkbutton $f.adj.f0  -text "Central frequency" -variable pars(adj_freq)
  checkbutton $f.adj.df  -text "Frequency span" -variable pars(adj_fspan)
  checkbutton $f.adj.drv -text "Target amplitude:" -variable pars(adj_drive)
  checkbutton $f.adj.tt  -text "Time step" -variable pars(adj_time)
  checkbutton $f.adj.ph  -text "Phase" -variable pars(adj_phase)
  entry $f.adj.am_v -width 12 -textvariable pars(amp_target)
  button $f.adj.load -text "Load from DB" -command load_pars

  grid $f.adj.lof -sticky nw -columnspan 2
  grid $f.adj.f0 $f.adj.df  -sticky nw
  grid $f.adj.drv $f.adj.am_v -sticky nw
  grid $f.adj.tt $f.adj.ph  -sticky nw
  grid $f.adj.load -sticky nw -padx 2 -pady 2

  pack $f.adj -expand 0 -fill x -anchor ne
  widget_bg $f.adj #E0E0F0

  ###########
  ## adjustment parameters

  set f $w.adjpar
  frame $f
  $w insert end adjpar -window $f\
     -anchor n -text "Adj.Pars" -fill both -padx 3 -pady 3

  label $f.fspan_l -text "Span size (in line widths):"
  entry $f.fspan_v -width 4 -textvariable pars(fspan_size)
  grid $f.fspan_l $f.fspan_v -sticky nw

  label $f.flim_l -text "Frequency limits:"
  entry $f.fmin -width 10 -textvariable pars(adj_fmin)
  entry $f.fmax -width 10 -textvariable pars(adj_fmax)
  grid $f.flim_l -sticky nw -columnspan 2
  grid $f.fmin $f.fmax -sticky nw

  label $f.dlim_l -text "Drive limits:"
  entry $f.dmin -width 10 -textvariable pars(adj_dmin)
  entry $f.dmax -width 10 -textvariable pars(adj_dmax)
  grid $f.dlim_l -sticky nw -columnspan 2
  grid $f.dmin $f.dmax -sticky nw

  label $f.tlim_l -text "Time step limits:"
  entry $f.tmin -width 10 -textvariable pars(adj_tmin)
  entry $f.tmax -width 10 -textvariable pars(adj_tmax)
  grid $f.tlim_l -sticky nw -columnspan 2
  grid $f.tmin $f.tmax -sticky nw
}

# tracking mode frame
proc mk_frame_track {w} {

  labelframe $w -text "Tracking mode:" -font {-weight bold -size 10}

  frame $w.v
  label $w.v.xl -text "X:"
  label $w.v.xv -textvariable ::track_x -width 10
  label $w.v.yl -text "Y:"
  label $w.v.yv -textvariable ::track_y -width 10
  label $w.v.fl -text "F-F0:"
  label $w.v.fv -textvariable ::track_ff0 -width 10
  grid $w.v.xl $w.v.xv $w.v.yl $w.v.yv $w.v.fl $w.v.fv
  grid $w.v -sticky we -columnspan 3

  button $w.start -command on_track_start -text "Start"
  button $w.stop  -command on_track_stop  -text "Stop"

  label $w.dtl -text "period \[s\]:"
  label $w.dt0l -text "first point delay:"
  entry $w.dtv  -textvariable ::pars(track_period) -width 5
  entry $w.dt0v -textvariable ::pars(track_del)    -width 5

  checkbutton $w.fa -text "adjust ampl" -variable pars(track_adja)
  checkbutton $w.ff -text "adjust freq" -variable pars(track_adjf)

  label $w.fsl -text "adjust freq strength 0..1:"
  entry  $w.fs -textvariable pars(track_adjfv) -width 5

  label $w.skl -text "Skip filter, (f-f0)/df units, or 0:"
  entry  $w.sk -textvariable pars(track_skip) -width 5

  grid $w.start $w.stop -
  grid $w.dtl $w.dtv $w.fa -sticky w
  grid  $w.dt0l $w.dt0v $w.ff -sticky w
  grid $w.fsl - $w.fs -sticky e
  grid $w.skl - $w.sk -sticky e
  grid $w -sticky we


  labelframe $w.tr4 -text "AmpSweep:"
  button $w.tr4.aswb1  -text "Up"       -command on_track_amp_up
  button $w.tr4.aswb2  -text "Down"     -command on_track_amp_down
  button $w.tr4.aswb3  -text "JumpDown" -command on_track_amp_jump
  button $w.tr4.aswb4  -text "Pause"    -command on_track_amp_pause

  label $w.tr4.aswm_l -text "Max:"
  entry $w.tr4.aswm_v -textvariable pars(track_amp_mx) -width 5
  label $w.tr4.asws_l -text "Step:"
  entry $w.tr4.asws_v -textvariable pars(track_amp_s) -width 5

  grid $w.tr4.aswb1 $w.tr4.aswb2 $w.tr4.aswb3 $w.tr4.aswb4 -sticky ew
  grid $w.tr4.aswm_l $w.tr4.aswm_v $w.tr4.asws_l $w.tr4.asws_v -sticky ew
  grid $w.tr4 -sticky we -columnspan 3


}


# Build GUI frame in <root>
proc func_mkint {w} {
  global fitres pars

  ############################
  # top frame with measurement results
  mk_frame_top $w.res
  pack $w.res -fill x -expand 0

  ############################
  # tabs
  blt::tabset $w.tabs
  pack $w.tabs -fill both -expand 1

  ############################
  ### measurement frame
  set f_meas $w.tabs.meas
  frame $f_meas
  $w.tabs insert end meas -window $f_meas\
     -anchor n -text "Measurement" -fill both -padx 3 -pady 3

  ####
  # configuration frame
  set f_conf $f_meas.conf
  frame $f_conf

  mk_frame_meas_tabs $f_conf.meas_tabs
  pack $f_conf.meas_tabs -expand 0 -fill x -anchor ne

  # lock-in panel
  $::lockin make_widget $f_conf.lockin\
    -title "Lock-in" -bar_w 256
  pack $f_conf.lockin -expand 0 -fill x -anchor ne
  widget_bg $f_conf.lockin #F0E0F0

  # generator panel
  $::gen make_widget $f_conf.gen\
    -title "Generator" -show_ac_shift 0
  pack $f_conf.gen -expand 0 -fill x -anchor ne
  widget_bg $f_conf.gen #F0F0E0


  ####
  # sweep timeplot (4 columns: f, x, y, a)
  TimePlot tplot_sweep $f_meas.tplot\
   -ncols      3\
   -maxt       3600\
   -colors     {black red blue}\
   -names      {F X Y}\
   -titles     {F X Y}\
   -symbols    {circle circle circle circle}\
   -ssizes     {}\
   -fmts       %.2f\
   -plots_x     {F}\
   -plots_y     {{X Y}}\
   -zstyles    xy

  if {$pars(vertical)} {
    grid $f_meas.tplot  -sticky wens
    grid $f_conf -sticky ew
    grid rowconfigure $f_meas 1 -weight 1
    grid columnconfigure $f_meas 0 -weight 1
  }\
  else {
    grid $f_conf $f_meas.tplot  -sticky wens
    grid rowconfigure $f_meas 0 -weight 1
    grid columnconfigure $f_meas 1 -weight 1
  }

  ############################
  ### Timeplot/Track
  set f_res $w.tabs.res
  frame $f_res
  $w.tabs insert end res -window $f_res\
     -anchor n -text "Res/Track" -fill both -padx 3 -pady 3

  TimePlot tplot_res $f_res.tplot\
   -ncols      3\
   -maxt       $pars(plot_maxt)\
   -colors     {}\
   -names      {W F A}\
   -titles     {W F A}\
   -symbols    {circle circle circle}\
   -ssizes     {}\
   -fmts       {$pars(wid_fmt) $pars(fre_fmt) $pars(amp_fmt)}\

  grid $f_res.tplot -sticky wens
#  pack $f_res.tplot -expand 1 -fill both -anchor ne

  mk_frame_track $f_res.track
  grid $f_res.track -sticky we

  grid rowconfigure $f_res 0 -weight 1
  grid columnconfigure $f_res 0 -weight 1

}

############################
# Track start/stop buttons
proc on_track_start {} {
  global fitres fitres_tr pars
  if {$pars(meas_mode) eq "track"} return
  if {![array exists fitres]} { error "No measured resonance available" }
  array set fitres_tr [array get fitres]

  sweep_pan stop
  sweep_pan do_step
  mon set_period $pars(track_period)
  $::gen set_freq $fitres(f0)
  after [expr {int($pars(track_del)*1000)}]
  set pars(meas_mode) "track"
}

proc on_track_stop {} {
  global pars
  if {$pars(meas_mode) eq "sweep"} return
  set pars(meas_mode) "sweep"
}

proc on_track_amp_up {} {
  global pars fitres
  if {$pars(meas_mode) eq "sweep"} return
  if {$pars(track_amp_mx) < $fitres(drive)} return
  if {$pars(track_ampsw)==0} {
    set pars(track_amp_mn) $fitres(drive)
    set pars(track_amp_f0) $fitres(f0)
    set pars(track_ampsw) 1
  }
  set pars(track_amp_d) 1
}

proc on_track_amp_down {} {
  global pars
  if {$pars(meas_mode) eq "sweep"} return
  if {$pars(track_amp_mn) > $fitres(drive)} return
  if {$pars(track_ampsw)==0} {return}
  set pars(track_amp_d) -1
}

proc on_track_amp_jump {} {
  global pars
  if {$pars(meas_mode) eq "sweep"} return
  if {$pars(track_ampsw) == 0} return
  $::gen set_freq $pars(track_amp_f0)
  $::gen set_volt $pars(track_amp_mn)
  set pars(track_amp_d) 0
  set pars(track_ampsw) 0
}

proc on_track_amp_pause {} {
  global pars
  if {$pars(meas_mode) eq "sweep"} return
  if {$pars(track_ampsw) == 0} return
  set pars(track_amp_d) 0
}

##########################################################################
##########################################################################
## create the monitor class
Monitor mon .m -name $pars(name) -period 1 -onoff 1\
  -func_start {} -func_stop {}\
  -func_meas func_meas -func_meas_e func_meas_e -func_mkint func_mkint\
  -show_ctl 0 -show_title 1 -verb 0 -wait_meas 0

pack .m -expand 1 -fill both
wm protocol . WM_DELETE_WINDOW { mon do_exit }
if {$pars(geometry) != {}} {wm geometry . $pars(geometry)}
