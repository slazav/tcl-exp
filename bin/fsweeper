#!/usr/bin/wish

## Frequency sweeper (to be used instead on nmr_meas)

### Three blocks: lock-in settings; generator settings; set frequency block
### (todo: split generator block into generator + compensation)

###  lock-in block
###   - set/get range and time constant;
###   - measure current values

###  generator block


package require DeviceRole
package require xBlt
package require itcl
package require Exp

set Device::sync 1

### parameters

set default_pars {
  name           {Default} {program name}
  onoff          0         {initial state of main switch}
  loop           0         {initial state of lock-in loop}
  gauge_dev      {}        {Lock-in device name}
  gen_dev        {}        {2-ch generator}
  gen_fmin       1e5       {generator min freq, Hz}
  gen_fmax       2e6       {generator max freq, Hz}
  gen_npt        25        {generator number of points}
  db_dev         {}        {db device}
  db_nmr_lockin  {}        {database for nmr lockin parameters (range, tconst)}
  db_nmr_gen     {}        {database for nmr generator parameters (exc_amp, exc_ph, comp_amp, comp_ph)}
  db_nmr_cal     {}        {database for nmr calibration (exc_gain, exc_turn, comp_gain, comp_turn)}
  db_nmr_res     {}        {database for nmr resonance curves (fre x y)}
  db_nmr_q       {}        {database for nmr reasured resonance parameters (fre q)}
  use_comp       1         {use compensation interface and dgen device role}
  autosave       0         {autosave resonance curves}
  autorepeat     0         {autorepeat resonance curve measurements}
  fit_type       none      {how to fit resonance curve: none, simple}
}

#foreach {name def title} $par_list { set pars($name) $def }
if {[llength $argv]>0 } {
  read_conf [lindex $argv 0] pars $default_pars
}\
else {
  foreach {name def title} $default_pars { set pars($name) $def }
}

tk appname "fsweeper: $pars(name)"


##########################################################
# lock-in interface
itcl::class LockinInt {

  variable dev_name {};
  variable widget {};

  variable range  1
  variable tconst 1
  variable dev    {}
  variable value  {}
  variable status {}
  variable ww 250; # value bar width
  variable hh 10;  # value bar height

  constructor {dev_name_ widget_} {
    set dev_name $dev_name_
    set widget   $widget_
    labelframe $widget -text "Lock-in settings" -font {-weight bold -size 10}

    # Sensitivity combobox
    label $widget.range_l -text "Sensitivity, V:"
    ttk::combobox $widget.range -width 9 -textvariable [itcl::scope range]
    bind $widget.range <<ComboboxSelected>> "$this apply"
    grid $widget.range_l $widget.range -padx 5 -pady 2 -sticky e

    # Time constant combobox
    label $widget.tconst_l -text "Time constant, s:"
    ttk::combobox $widget.tconst -width 9 -textvariable [itcl::scope tconst]
    bind $widget.tconst <<ComboboxSelected>> "$this apply"
    grid $widget.tconst_l $widget.tconst -padx 5 -pady 2 -sticky e

    # Measured values
    set v $widget.val
    canvas $v -width $ww -height $hh
    $v create rectangle 1 1 $ww $hh -fill white -outline grey
    $v create line [expr $ww/2] 1 [expr $ww/2] $hh
    grid $v -padx 5 -pady 2 -sticky e -columnspan 2

    label $widget.status -textvariable [itcl::scope status] \
      -font {-size 10 -weight bold} -fg red

    button $widget.ubtn -text "Update" -command "$this update"
    grid $widget.status $widget.ubtn -padx 3 -pady 3

    widget_bg $widget #E0E0F0
    widget_state $widget disabled
  }

  method get_widget {} {return $widget}

  method widget_state_ {w s} {
    if $s {set s_ttk !disabled; set s_tk normal} \
     else {set s_ttk disabled; set s_tk disabled}
    foreach w {range tconst} {$widget.$w state $s_ttk}
    foreach w {range_l tconst_l val status ubtn} {widget_state $widget.$w $s_tk}
  }

  # open devices
  method on {} {
    if {$dev_name == {}} { error "gauge_dev is empty" }
    if {$dev == {}} { set dev [DeviceRole $dev_name gauge] }
    update
    widget_state_ $widget 1
  }

  # release opened devices
  method off {} {
    if {$dev != {}} { itcl::delete object $dev }
    set dev {}
    widget_state_ $widget 0
  }

  # write settings to lock-in device
  method apply {} {
    if {$dev == {}} return
    $dev set_range  $range
    $dev set_tconst $tconst
    if {$::pars(db_dev)!={} && $::pars(db_nmr_lockin)!={}} {
      $::pars(db_dev) cmd put $::pars(db_nmr_lockin) now $range $tconst
      $::pars(db_dev) cmd sync
    }
    update_val
  }

  # read settings from lock-in device
  method update {} {
    if {$dev == {}} return
    $widget.tconst configure -values [$dev list_tconsts]
    $widget.range  configure -values [$dev list_ranges]
    set range    [$dev get_range]
    set tconst   [$dev get_tconst]
    update_val
  }

  # measure values, update picture
  method update_val {} {
    if {$dev == {}} return
    set value    [$dev get]
    if {$dev == {}} return
    set status   [$dev get_status]
    set x [lindex $value 0]
    set y [lindex $value 1]
    set v $widget.val
    set x1 [expr int((1.0+$x/$range)*0.5*$ww)]
    set y1 [expr int((1.0+$y/$range)*0.5*$ww)]
    set z [expr $ww/2]
    $v delete data
    $v create rectangle $z 1 $x1 [expr $hh/2] -fill darkcyan -tags data
    $v create rectangle $z [expr $hh/2] $y1 $hh -fill green -tags data
    return $value
  }

  # same but with waiting
  method update_val_w {} {
    after [expr 2*int($tconst*1000)] $this update_val
  }

  # silent measurement with autorange
  method get_auto {} {
    if {$dev == {}} return
    return [$dev get_auto]
  }

  # silent measurement without autorange
  method get {} {
    if {$dev == {}} return
    return [$dev get]
  }

  # same with waiting
  # silent measurement with autorange
  method get_auto_w {} {
    if {$dev == {}} return
    after [expr int($tconst*1000*3)]
    return [$dev get_auto]
  }

  method get_w {} {
    if {$dev == {}} return
    after [expr int($tconst*1000*3)]
    return [$dev get]
  }

  method wait_lock {} {
    if {$dev == {}} return
    set s [$dev get_status]
    set t 2000
    set dt 10
    while {1} {
      if {$t<0} {break}
      set s [$dev get_status]
      if {$s != "UNLOCK" && $s != "FRE_CH"} {break}
      set t [expr {$t-$dt}]
      after $dt
    }
  }

  # get/set range
  method get_range {} {
    if {$dev == {}} return
    return [$dev get_range]
  }
  method set_range {r} {
    if {$dev == {}} return
    return [$dev set_range $r]
  }
}


##########################################################
##########################################################
# generator interface
itcl::class GenInt {

  variable dev_name {};
  variable dev {};
  variable widget {};

  public variable fre  {}
  public variable amp1 {}
  public variable amp2 {}
  public variable ph1 {}
  public variable ph2 {}
  public variable estate 0
  public variable cstate 0
  public variable bestate 0
  public variable bcstate 0

  public variable egain 0
  public variable cgain 0
  public variable eturn 0
  public variable cturn 0
  public variable lockin_int {}


  variable r2d [expr {180/3.1415926}]

  constructor {dev_name_ widget_} {
    set dev_name $dev_name_
    set widget $widget_
    labelframe $widget -text "Generator settings" -font {-weight bold -size 10}

    # Frequency/amplitude/phase entries
    foreach n {fre amp1 ph1}\
            t {"Frequency, Hz:" "Excitation, Vpp:" "Phase, deg:"} {
      label $widget.${n}_l -text $t
      entry $widget.${n} -width 12 -textvariable [itcl::scope ${n}] 
      grid $widget.${n}_l $widget.${n} -padx 5 -pady 2 -sticky e
    }

    checkbutton $widget.estate -text "Excitation ON"\
       -variable [itcl::scope estate] -command "$this switch_exc"
#    checkbutton $widget.bestate -text "Burst"\
#       -variable [itcl::scope bestate] -command "$this switch_burst_exc"
#    grid $widget.estate $widget.bestate -padx 5 -pady 2 -sticky w -columnspan 1
    grid $widget.estate -padx 5 -pady 2 -sticky w -columnspan 1


    if {$::pars(use_comp)} {
      # Compensation/Comp.phase spinboxes
      label $widget.amp2_l -text "Compensation, Vpp:"
      spinbox $widget.amp2 -from 0.000 -to 9.999 -increment 0.01 -width 8\
               -format %1.3f -textvariable [itcl::scope amp2] -command "$this apply_comp"
      grid $widget.amp2_l $widget.amp2 -padx 5 -pady 2 -sticky e

      label $widget.ph2_l -text "Comp.phase, deg:"
      spinbox $widget.ph2 -from -360 -to 360 -increment 1 -width 8\
               -format %7.3f -textvariable [itcl::scope ph2] -command "$this apply_comp"
      grid $widget.ph2_l $widget.ph2 -padx 5 -pady 2 -sticky e

      checkbutton $widget.cstate -text "Compensation ON"\
         -variable [itcl::scope cstate] -command "$this switch_comp"
#      checkbutton $widget.bcstate -text "Burst"\
#         -variable [itcl::scope bcstate] -command "$this switch_burst_comp"
#      grid $widget.cstate $widget.bcstate -padx 5 -pady 2 -sticky w -columnspan 1
      grid $widget.cstate -padx 5 -pady 2 -sticky w -columnspan 1
    }

    # Apply/Update buttons
    button $widget.abtn -text "Apply"  -command "$this apply_exc"
    button $widget.ubtn -text "Update" -command "$this update"
    grid $widget.abtn $widget.ubtn -padx 3 -pady 3


    # Excitation/Compensation gains and phases
    if {$::pars(use_comp)} {
      foreach n {egain eturn cgain cturn}\
              t {"Excitation gain:" "Excitation turn:"\
                 "Compensation gain:" "Compensation turn:"} {
        label $widget.${n}_l -text $t
        label $widget.${n} -width 12 -textvariable [itcl::scope ${n}] 
        grid $widget.${n}_l $widget.${n} -padx 5 -pady 2 -sticky e
      }

      # Calibrate/Adjust buttons
      button $widget.cal_btn -text "Calibrate gains"\
             -command "$this calibrate"
      button $widget.adj_btn -text "Adjust"\
             -command "$this adjust_comp"
       grid $widget.cal_btn $widget.adj_btn -padx 5 -pady 2 -sticky e
    }

    widget_bg $widget #F0E0E0
    widget_state $widget disabled
  }

  method get_widget {} {return $widget}

  method on {} {
    if {$dev_name == {}} { error "gen_dev is empty" }
    if {$dev == {}} {
      if {$::pars(use_comp)} {set dev [DeviceRole $dev_name dgen]}\
      else {set dev [DeviceRole $dev_name ac_source]}
    }
    update
    widget_state $widget normal
  }

  method off {} {
    if {[info command $dev] != {}} { itcl::delete object $dev }
    widget_state $widget disabled
  }

  # write settings to generator device
  method apply_exc {} {
    if {[info command $dev] == {}} return

    # change excitation amplitude and phase,
    # compensation will be changed accordingly
    $dev set_freq $fre
    if {$::pars(use_comp)} {
      $dev change_amp $amp1 $ph1
    }\
    else {
      $dev set_volt $amp1
      $dev set_phase $ph1
    }

    # update values in the interface
    set amp1 [format "%.4f" [$dev get_volt]]
    set ph1  [format "%.4f" [$dev get_phase]]

    if {$::pars(use_comp)} {
      set amp2 [format "%.4f" [$dev get_volt2]]
      set ph2  [format "%.4f" [$dev get_phase2]]
    }

    # update lockin interface
    if {$lockin_int!={}} {$lockin_int update_val_w}

    if {$::pars(db_dev)!={} && $::pars(db_nmr_gen)!={}} {
      if {$::pars(use_comp)} {
        $::pars(db_dev) cmd put $::pars(db_nmr_gen) now $fre $amp1 $ph1 $amp2 $ph2
      } else {
        $::pars(db_dev) cmd put $::pars(db_nmr_gen) now $fre $amp1 $ph1
      }
      $::pars(db_dev) cmd sync
    }
  }

  method apply_comp {} {
    if {!$::pars(use_comp)} return
    if {[info command $dev] == {}} return

    # change compensation amplitude and phase
    $dev set_volt $amp2
    $dev set_phase $ph2

    # update values in the interface
    set amp2 [format "%.4f" [$dev get_volt2]]
    set ph2  [format "%.4f" [$dev get_phase2]]

    # update lockin interface
    if {$lockin_int!={}} {$lockin_int update_val_w}
    if {$::pars(db_dev)!={} && $::pars(db_nmr_gen)!={}} {
      $::pars(db_dev) cmd put $::pars(db_nmr_gen) now $fre $amp1 $ph1 $amp2 $ph2
      $::pars(db_dev) cmd sync
    }
  }

  # read settings from generator device
  method update {} {
    if {[info command $dev] == {}} return

    # update values in the interface
    set fre  [format "%.4f" [$dev get_freq]]
    set amp1 [format "%.4f" [$dev get_volt]]
    set ph1  [format "%.4f" [$dev get_phase]]
    set estate [expr $amp1==0]

    if {$::pars(use_comp)} {
      set amp2 [format "%.4f" [$dev get_volt2]]
      set ph2  [format "%.4f" [$dev get_phase2]]
      set cstate [expr $amp2==0]
    }

  }

  method measure {} {
    if {[info command $dev] == {}} return

    if {$::pars(use_comp)} {
      return [list\
             [$dev get_freq]\
             [$dev get_volt]\
             [$dev get_volt2]\
             [$dev get_phase]\
             [$dev get_phase2]
    } else {
      return [list\
             [$dev get_freq]\
             [$dev get_volt]\
             [$dev get_phase]\
    }

  }

  method switch_exc { {v {}} } {
    if {[info command $dev] == {}} return
    if {$v != {}} {set estate $v}
    if {$estate} {$dev on} else {$dev off}
  }

#  method switch_burst_exc { {v {}} } {
#    if {[info command $dev] == {}} return
#    if {$v != {}} {set bestate $v}
#    $dev cmd SOUR1:BURST:STATE "$bestate"
#    $dev cmd SOUR1:BURST:MODE "TRIG"
#  }
  method switch_comp { {v {}} } {
    if {!$::pars(use_comp)} return
    if {[info command $dev] == {}} return
    if {$v != {}} {set cstate $v}
    if {$cstate} {$dev on2} else {$dev off2}
  }
#  method switch_burst_comp { {v {}} } {
#    if {[info command $dev] == {}} return
#    if {$v != {}} {set bcstate $v}
#    $dev cmd SOUR2:BURST:STATE "$bcstate"
#    $dev cmd SOUR2:BURST:MODE "TRIG"
#  }

  method fix_phase {ph} { return [expr $ph-int($ph/360.0)*360] }

  # calibrate compensation/excitation gains
  method calibrate {} {
    if {!$::pars(use_comp)} return
    if {$lockin_int == {}} return
    # save original range
    set range [$lockin_int get_range]
    # read actual generator values
    update
    widget_state $widget disabled

    # calibrate excitation:
    switch_exc  1
    switch_comp 0
    # do measurement
    set v [$lockin_int get_auto_w]
    if {[llength $v]==0} {return}
    set x [lindex $v 0]
    set y [lindex $v 1]
    set r1 [expr {hypot($x,$y)}]
    set p1 [expr {atan2($y,$x)*$r2d}]

    after 100

    # calibrate compensation:
    switch_exc  0
    switch_comp 1
    set v [$lockin_int get_auto_w]
    if {[llength $v]==0} {return}
    set x [lindex $v 0]
    set y [lindex $v 1]
    set r2 [expr {hypot($x,$y)}]
    set p2 [expr {atan2($y,$x)*$r2d}]

    # measure parameters
    update
    set egain [format "%.4e" [expr {$r1/$amp1}]]
    set cgain [format "%.4e" [expr {$r2/$amp2}]]
    set eturn [format "%.4f" [fix_phase [expr "$p1 - $ph1"]]]
    set cturn [format "%.4f" [fix_phase [expr "$p2 - $ph2"]]]
    if {$::pars(db_dev)!={} && $::pars(db_nmr_cal)!={}} {
      $::pars(db_dev) cmd put $::pars(db_nmr_cal) now $egain $eturn $cgain $cturn
      $::pars(db_dev) cmd sync
    }

    # restore settings
    switch_exc  1
    switch_comp 1

    # compensate
#    set amp2 [format "%.4f" [expr {$amp1 * $egain / $cgain}]]
#    set ph2  [format "%.4f" [expr {(180 + $ph1 + $eturn) - $cturn}]]
    # apply_comp

    #restore lock_in range
    $lockin_int set_range $range
    $lockin_int update
#    after 500 $this adjust_comp

    # enable buttons
    widget_state $widget normal
  }

  # adjust compensation using old calibration
  # no change in lock-in and excitation settings
  method adjust_comp {} {
    if {!$::pars(use_comp)} return
    if {$lockin_int == {}} return
    if {$cgain == 0} {calibrate}

    # measure value
    set v [$lockin_int get]
    if {[llength $v]==0} {return}
    set x [lindex $v 0]
    set y [lindex $v 1]
    set r [expr {hypot($x,$y)}]
    set p [expr {atan2($y,$x)*$r2d}]

    set damp2 [expr {-$r / $cgain}]
    set dph2  [expr {$p - $cturn}]

    set x [expr {$amp2*cos($ph2/$r2d) + $damp2*cos($dph2/$r2d)}]
    set y [expr {$amp2*sin($ph2/$r2d) + $damp2*sin($dph2/$r2d)}]

    set amp2 [format "%.4f" [expr {hypot($x,$y)}]]
    set ph2  [format "%.4f" [expr {atan2($y,$x)*$r2d}]]
    apply_comp
  }

}

##########################################################
# SetFreq interface
itcl::class FreqInt {

  variable widget {};
  variable btnlist {}

  public variable fmin $::pars(gen_fmin)
  public variable fmax $::pars(gen_fmax)
  public variable npt  $::pars(gen_npt)

  public variable gen_int {}
  public variable lockin_int {}

  public variable resfreq {}
  public variable qfactor {}

  constructor {widget_} {
    set widget $widget_
    set btnlist {}
    labelframe $widget -text "Set Frequency" -font {-weight bold -size 10}

    # Frequency/amplitude/phase entries
    set pfr $widget.pfr
    frame $pfr
    foreach n {fmin fmax npt}\
            t {"Min freq, Hz:" "Max freq, Hz:" "Num.of points:"} {
      label $pfr.${n}_l -text $t
      entry $pfr.${n} -width 12 -textvariable [itcl::scope ${n}]
      grid $pfr.${n}_l $pfr.${n} -padx 5 -pady 2 -sticky e
    }

    # Results
    set rfr $widget.rfr
    frame $rfr
    label  $rfr.fre_l -text "F: " -font {-size 14 -weight bold}
    label  $rfr.fre_v -text "" -textvariable [itcl::scope resfreq] -font {-size 14 -weight bold}
    label  $rfr.fre_u -text "Hz" -font {-size 14 -weight bold}
    label  $rfr.q_l -text "Q: " -font {-size 14 -weight bold}
    label  $rfr.q_v -text "" -textvariable [itcl::scope qfactor] -font {-size 14 -weight bold}
    grid $rfr.fre_l $rfr.fre_v $rfr.fre_u
    grid $rfr.q_l $rfr.q_v $rfr.fre_u

    grid $pfr $rfr

    # Apply/Update buttons
    set bfr $widget.bfr
    frame $bfr
    button $bfr.run  -text "Run"  -command "$this run"
    button $bfr.stop -text "Stop" -command "$this stop"
    button $bfr.save -text "Save" -command "$this save"

    if {$::pars(autosave)} {
      pack $bfr.run $bfr.stop -side left -padx 3 -pady 3
    } else {
      pack $bfr.run $bfr.stop $bfr.save -side left -padx 3 -pady 3
    }

    lappend btnlist $widget.rbtn $widget.sbtn
    grid $bfr


    TimePlot setfre_plot $widget.setfre_pl\
      -ncols 4\
      -names {Freq X Y amp}\
      -colors {black darkcyan green magenta}\
      -symbols {circle circle circle circle}\
      -hides {0 1 1 0}\
      -plots_x {Freq X}\
      -plots_y {{}   Y}
    grid $widget.setfre_pl -columnspan 2
    widget_state $widget disabled

    # create vectors for fit results
    blt::vector create fitx fity
  }

  method get_widget {} {return $widget}

  method on {} {
    widget_state $widget normal
  }
  method off {} {
    widget_state $widget disabled
  }

  variable run_of {}; # old frequency
  variable run_f1 {}
  variable run_f2 {}
  variable run_npt 0
  variable run_i
  variable run_handler {}
  variable switch_e 0
  variable switch_c 0

  # start the measurement
  method run {} {
    # remove old fitting curve if it exists
    set G [setfre_plot get_graph]
    if {[$G element names fit] != {}} {$G element delete fit}

    # clear olt q/f0 settings
    set resfreq {}
    set qfactor {}
    # save values to prevent modifications on the fly
    set run_of  [gen_int cget -fre]
    set run_f1  $fmin
    set run_f2  $fmax
    set run_npt $npt
    set run_i   0
    after cancel $run_handler
    widget_state [gen_int get_widget] disabled
    setfre_plot clear
    set switch_e [$gen_int cget -estate]
    set switch_c [$gen_int cget -cstate]
    $gen_int switch_exc  1
    $gen_int switch_comp 0
    $gen_int configure -fre $run_f1
    $gen_int apply_exc
    after 2000
    if {$run_npt < 1} {return}
    set run_handler [after idle $this step]
  }

  # do one step
  method step {} {
    if {$run_i>=$run_npt} {finish; return}
    set f [expr {$run_f1 + 1.0*($run_f2-$run_f1)*$run_i/($run_npt-1)}]
    set f [format %.2f $f]
    $gen_int configure -fre $f
    $gen_int apply_exc
    $lockin_int wait_lock
    set res [$lockin_int get_w]
    # in case if stop button pressed during measurement
    if {$run_i>=$run_npt} {return}
    set amp [expr {hypot([lindex $res 0],[lindex $res 1])}]
    set t [expr [clock milliseconds]/1000.0]
    set x [expr [lindex $res 0]]
    set y [expr [lindex $res 1]]
    setfre_plot add_data [list $t $f $x $y $amp]
    incr run_i
    set run_handler [after idle $this step]
  }

  # stop the measurements
  method stop {} {
    if { $run_handler == {} } return
    after cancel $run_handler
    set run_npt 0
    widget_state [gen_int get_widget] normal
    if {$run_of != {}} {$gen_int configure -fre $run_of}
    $gen_int switch_exc  $switch_e
    $gen_int switch_comp $switch_c
    $gen_int apply_exc
  }

  # finish the measurement (do fits)
  method finish {} {
    stop
    switch -exact -- $::pars(fit_type) {

      none {}

      simple {
        set fv [setfre_plot get_dvec 0]
        set av [setfre_plot get_dvec 3]
        set res [fit_res $fv $av]

        set f0 [lindex $res 0]
        set q  [lindex $res 1]
        set a0 [lindex $res 2]
        set xl [lindex $res 3]
        set xr [lindex $res 4]
        set aa [expr $a0/2.0]
        set df [expr {$f0/$q/2}]

        set resfreq [format %.2f $f0]
        set qfactor [format %.2f $q]

        # draw a fitting curve on the plot
        set G [setfre_plot get_graph]
        fitx seq $xl $xr [expr ($xr-$xl)/100]
        fity expr {$a0/sqrt((fitx-$f0)^2 + $df^2)*$df}

        $G element create fit -outline black -mapx xFreq -mapy amp\
          -xdata fitx -ydata fity -symbol {}
      }
      default {error "unknown fit_type: $::pars(fit_type)"}
    }

    if {$::pars(autosave)} save
    if {$::pars(autorepeat)} run
  }

  # save parameters
  method save {} {
    stop
    set tv [setfre_plot get_tvec]
    set fv [setfre_plot get_dvec 0]
    set xv [setfre_plot get_dvec 1]
    set yv [setfre_plot get_dvec 2]
    if {$::pars(db_dev)!={} && $::pars(db_nmr_res)!={}} {
      for {set i 0} {$i < [$tv length]} {incr i} {
        $::pars(db_dev) cmd put $::pars(db_nmr_res)\
           [$tv index $i] [$fv index $i] [$xv index $i] [$yv index $i]
      }
      $::pars(db_dev) cmd sync
    }

    # set generator
    if {$resfreq != {}} {
      $gen_int configure -fre $resfreq
      $gen_int apply_exc
    }

    # write $resfreq and $qfactor into DB
    if {$::pars(db_dev)!={} && $::pars(db_nmr_q)!={} &&\
        $resfreq != {} && $qfactor != {} && [$tv length]} {
      $::pars(db_dev) cmd put $::pars(db_nmr_q) [$tv index 0] $resfreq $qfactor
    }

  }

}


##########################################################


proc set_state {state} {
  set ::state $state
  if {$state} on else off
}

proc on {} {
  gen_int on
  lockin_int on
  fre_int on
}

proc off {} {
  fre_int stop
  lockin_int off
  gen_int off
  fre_int off
}

##########################################################

if {$pars(db_dev) != {}} {Device $pars(db_dev)}

## make interface
LockinInt lockin_int $pars(gauge_dev) .l
grid .l -padx 5 -sticky new -column 1 -row 1

GenInt gen_int $pars(gen_dev) .g
gen_int configure -lockin_int lockin_int
grid .g -padx 5 -sticky new -column 1 -row 2

FreqInt fre_int .f
fre_int configure -lockin_int lockin_int
fre_int configure -gen_int gen_int
grid .f -padx 5 -sticky new -column 2 -row 1 -rowspan 2


checkbutton .oo -text "on/off" -variable ::state -command {set_state $::state}
grid .oo -sticky w -row 3 -columnspan 2

set_state $pars(onoff)

proc loop {} {
  lockin_int update_val
  $::pars(db_dev) cmd sync
  after 1000 loop
}

if $pars(loop) loop
