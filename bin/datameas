#!/bin/sh
# \
exec wish "$0" "$@"

## Interface for gauge devices

package require Device 1.3
package require DeviceRole
package require Exp

set default_pars [list \
name           {Default}              {program title}\
dev            {}                     {gauge device}\
db_dev         {}                     {db device}\
db             {}                     {database name}\
dt             1                      {default time step, s}\
ncols          3                      {number of data columns}\
maxt           100000                 {max number of data points}\
names          {D1 D2 D3}             {data names}\
plots_x        {time D1 D2 D3}         {plots_x}\
plots_y        {{} {} {}}             {plots_y}\
symbols        {}                     {symbols}\
zstyles        {x x xy}               {zstyles}\
use_comm       1                      {use_comm} \
use_marker     1                      {use_marker} \
dataconv       {}                     {input data convertion} \
]

if {[llength $argv]>0 } {
  read_conf [lindex $argv 0] pars $default_pars
  set def_conf 0
  set meas?  1
}\
else {
  foreach {name def title} $default_pars { set pars($name) $def}
  set def_conf 1
  set meas? 0
}
set db     $pars(db)
set db_dev $pars(db_dev)
set dt     $pars(dt)


wm title . "$argv0: $pars(name)"

# Configure time plot
TimePlot pl .pl\
  -ncols      $pars(ncols)\
  -maxt       $pars(maxt)\
  -names      $pars(names)\
  -plots_x    $pars(plots_x)\
  -plots_y    $pars(plots_y)\
  -symbols    $pars(symbols)\
  -zstyles    $pars(zstyles)\
  -use_comm   $pars(use_comm)\
  -use_marker $pars(use_marker)
pack .pl -fill both -expand y


proc dtChanged { W old new} { 
  if {[regexp {^[0-9.]*$} $new]} { return 1 }
  set $::dt $old
  return 0
}

label .pl.dtl -text "  dt, s:"
entry .pl.dt  -textvariable dt -width 8 -vcmd {dtChanged %W %s %P} -validate {key}
pack  .pl.dtl -side left -padx 5
pack  .pl.dt  -side left

frame       .run
checkbutton .run.noDB  -text "don't save to database"   -command setcolor  -variable ::noDB
checkbutton .run.meas? -text "running"                  -command dev_state -variable ::meas?

pack .run -fill x
pack .run.noDB -side left  -pady 5 -padx 5
pack .run.meas? -side right



proc set_dtms args {
  if {[regexp {^[0\.]*$} $::dt]} return
  set ::dtms [expr {int($::dt*1000)}]
  after cancel add_trig
  add_trig
}
trace add variable dt write "set_dtms"
set trig 1
set dtms [expr {int($::dt*1000)}]


proc open_dev  {} { set ::dev [DeviceRole $::pars(dev) gauge] }
proc open_db   {} { Device $::pars(db_dev) }

set do_meas_do_close 0
proc close_dev  {} { itcl::delete object $::dev }
proc close_db   {} { itcl::delete object $::pars(db_dev) }
proc close_devs {} { if {$::safe_stop} { close_dev; close_db } { set ::do_meas_do_close 1 } }


if {!$def_conf} {open_dev; open_db}

proc dev_state {} {
  if ${::meas?} {open_db; open_dev} {close_devs}
}


set safe_stop 1
proc do_meas {} {
    set t [expr [clock milliseconds]/1000.0]
    set ::safe_stop 0
    set data [$::dev get]
    pl add_data [list $t {*}$data]
    if { !$::noDB } { $::db_dev cmd "put $::db $t $data" }
    set ::safe_stop 1
    if {$::do_meas_do_close} {close_devs}
    if {$::stop} exit
}

proc main {} {
  tkwait variable trig
  if ${::meas?} do_meas
  main
}


proc add_trig {} {
  set ::trig 1
  after $::dtms add_trig
}

proc setcolor {} {
 set c [expr { $::noDB? "red":"gray85" }]
 .run.noDB configure -background $c
}

set stop 0
proc do_safe_stop {} {
  if {$::safe_stop} {exit} { set ::stop 1 }
  exit
}

wm protocol . WM_DELETE_WINDOW {
  puts "quitting.."
  do_safe_stop
}


add_trig
main

