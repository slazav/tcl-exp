#!/usr/bin/wish

## Interface for NMR generator and lock-in setting

package require DeviceRole
package require xBlt
package require itcl
package require Exp

### parameters

set par_list [list \
  gen_dev   {gen0}   {2-ch generator}\
  gauge_dev {lockin0:XY} {Lock-in device name}\
  db_dev         db_exp      {db device}\
  db_nmr_lockin  drydemag/nmr_lockin {database for nmr lockin parameters (range, tconst)}\
  db_nmr_gen     drydemag/nmr_gen    {database for nmr generator parameters (exc_amp, exc_ph, comp_amp, comp_ph)}\
  db_nmr_cal     drydemag/nmr_cal    {database for nmr calibration (exc_gain, exc_turn, comp_gain, comp_turn)}\
]

foreach {name def title} $par_list { set pars($name) $def }

set state 0

##########################################################
# lock-in interface
itcl::class LockinInt {

  variable dev_name {};
  variable widget {};

  variable range  1
  variable tconst 1
  variable dev    {}
  variable value  {}
  variable ww 250; # value bar width
  variable hh 10;  # value bar height

  constructor {dev_name_ widget_} {
    set dev_name $dev_name_
    set widget   $widget_
    labelframe $widget -text "Lock-in settings" -font {-weight bold -size 10}

    # Sensitivity combobox
    label $widget.range_l -text "Sensitivity, V:"
    ttk::combobox $widget.range -width 9 -textvariable [itcl::scope range]
    bind $widget.range <<ComboboxSelected>> "$this apply"
    grid $widget.range_l $widget.range -padx 5 -pady 2 -sticky e

    # Time constant combobox
    label $widget.tconst_l -text "Time constant, s:"
    ttk::combobox $widget.tconst -width 9 -textvariable [itcl::scope tconst]
    bind $widget.tconst <<ComboboxSelected>> "$this apply"
    grid $widget.tconst_l $widget.tconst -padx 5 -pady 2 -sticky e

    # Measured values
    set v $widget.val
    canvas $v -width $ww -height $hh
    $v create rectangle 1 1 $ww $hh -fill white -outline grey
    $v create line [expr $ww/2] 1 [expr $ww/2] $hh
    grid $v -padx 5 -pady 2 -sticky e -columnspan 2

    button $widget.ubtn -text "Update" -command "$this update"
    grid x $widget.ubtn -padx 3 -pady 3

    set_bg #E0E0F0
    disable
  }

  # enable/disable elements
  method disable {} { foreach ch [winfo children $widget] { $ch configure -state disabled } }
  method enable {}  { foreach ch [winfo children $widget] { $ch configure -state normal } }

  method set_bg {bg} {
    foreach ch [winfo children $widget] { $ch configure -background $bg }
    $widget configure -background $bg }

  # open devices
  method on {} {
    if {$dev == {}} { set dev [DeviceRole $dev_name gauge] }
    update
    enable
  }

  # release opened devices
  method off {} {
    if {$dev != {}} { itcl::delete object $dev }
    set dev {}
    disable
  }

  # write settings to lock-in device
  method apply {} {
    if {$dev == {}} return
    $dev set_range  $range
    $dev set_tconst $tconst
    $::pars(db_dev) cmd put $::pars(db_nmr_lockin) now $range $tconst
    update_val
  }

  # read settings from lock-in device
  method update {} {
    if {$dev == {}} return
    $widget.tconst configure -values [$dev list_tconsts]
    $widget.range  configure -values [$dev list_ranges]
    set range    [$dev get_range]
    set tconst   [$dev get_tconst]
    update_val
  }

  # measure values, update picture
  method update_val {} {
    if {$dev == {}} return
    set value    [$dev get]
    set x [lindex $value 0]
    set y [lindex $value 1]
    set v $widget.val
    set x1 [expr int((1.0+$x/$range)*0.5*$ww)]
    set y1 [expr int((1.0+$y/$range)*0.5*$ww)]
    set z [expr $ww/2]
    $v delete data
    $v create rectangle $z 1 $x1 [expr $hh/2] -fill red -tags data
    $v create rectangle $z [expr $hh/2] $y1 $hh -fill green -tags data
    return $value
  }

  # same but with waiting
  method update_val_w {} {
    after [expr int($tconst*1000)] $this update_val
  }

  # silent measurement with autorange
  method get_auto {} {
    if {$dev == {}} return
    return [$dev get_auto]
  }

  # silent measurement without autorange
  method get {} {
    if {$dev == {}} return
    return [$dev get]
  }

  # get/set range
  method get_range {} {
    if {$dev == {}} return
    return [$dev get_range]
  }
  method set_range {r} {
    if {$dev == {}} return
    return [$dev set_range $r]
  }


}


##########################################################
# generator interface
itcl::class GenInt {

  variable dev {};
  variable widget {};

  public variable fre  {}
  public variable amp1 {}
  public variable amp2 {}
  public variable ph1 {}
  public variable ph2 {}
  public variable estate 0
  public variable cstate 0

  public variable egain 0
  public variable cgain 0
  public variable eturn 0
  public variable cturn 0
  public variable lockin_int {}

  # set frequency interface
  public variable f1 0.5e6
  public variable f2 1.2e6
  public variable nf 100


  variable r2d [expr {180/3.1415926}]

  constructor {dev_ widget_} {
    set dev $dev_
    set widget $widget_
    labelframe $widget -text "Generator settings" -font {-weight bold -size 10}

    # Frequency/amplitude/phase entries
    foreach n {fre amp1 ph1}\
            t {"Frequency, Hz:" "Excitation, Vpp:" "Phase, deg:"} {
      label $widget.${n}_l -text $t
      entry $widget.${n} -width 12 -textvariable [itcl::scope ${n}] 
      grid $widget.${n}_l $widget.${n} -padx 5 -pady 2 -sticky e
    }

    checkbutton $widget.estate -text "Excitation ON"\
       -variable [itcl::scope estate] -command "$this switch_exc"
    grid $widget.estate -padx 5 -pady 2 -sticky w -columnspan 2


    # Compensation/Comp.phase spinboxes
    label $widget.amp2_l -text "Compensation, Vpp:"
    spinbox $widget.amp2 -from 0.000 -to 9.999 -increment 0.01 -width 8\
             -format %1.3f -textvariable [itcl::scope amp2] -command "$this apply_comp"
    grid $widget.amp2_l $widget.amp2 -padx 5 -pady 2 -sticky e

    label $widget.ph2_l -text "Comp.phase, deg:"
    spinbox $widget.ph2 -from -360 -to 360 -increment 1 -width 8\
             -format %7.3f -textvariable [itcl::scope ph2] -command "$this apply_comp"
    grid $widget.ph2_l $widget.ph2 -padx 5 -pady 2 -sticky e

    checkbutton $widget.cstate -text "Compensation ON"\
       -variable [itcl::scope cstate] -command "$this switch_comp"
    grid $widget.cstate -padx 5 -pady 2 -sticky w -columnspan 2


    # Apply/Update buttons
    button $widget.abtn -text "Apply"  -command "$this apply_exc"
    button $widget.ubtn -text "Update" -command "$this update"
    grid $widget.abtn $widget.ubtn -padx 3 -pady 3


    # Excitation/Compensation gains and phases
    foreach n {egain eturn cgain cturn}\
            t {"Excitation gain:" "Excitation turn:"\
               "Compensation gain:" "Compensation turn:"} {
      label $widget.${n}_l -text $t
      label $widget.${n} -width 12 -textvariable [itcl::scope ${n}] 
      grid $widget.${n}_l $widget.${n} -padx 5 -pady 2 -sticky e
    }

    # Calibrate/Adjust buttons
    button $widget.cal_btn -text "Calibrate gains"\
           -command "$this calibrate"
    button $widget.adj_btn -text "Adjust"\
           -command "$this adjust_comp"
    grid $widget.cal_btn $widget.adj_btn -padx 5 -pady 2 -sticky e

    set_bg #F0E0E0
    disable
  }

  # enable/disable elements
  method disable {} { foreach ch [winfo children $widget] { $ch configure -state disabled } }
  method enable {}  { foreach ch [winfo children $widget] { $ch configure -state normal } }

  method set_bg {bg} {
    foreach ch [winfo children $widget] { $ch configure -background $bg }
    $widget configure -background $bg }

  method on {} {
    if {[info command $dev] == {}}  { Device $dev }
    $dev cmd SOUR1:VOLT:UNIT VPP
    $dev cmd SOUR2:VOLT:UNIT VPP
    $dev cmd UNIT:ANGL DEG
    $dev cmd SOUR1:FUNC SIN
    $dev cmd SOUR2:FUNC SIN
    $dev cmd OUTP1:LOAD INF
    $dev cmd OUTP2:LOAD INF
    $dev cmd FREQ:COUP ON
    $dev cmd OUTP:SYNC:SOUR 1
    update
    enable
  }

  method off {} {
    if {[info command $dev] != {}} { itcl::delete object $dev }
    disable
  }

  # write settings to generator device
  method apply_exc {} {
    if {[info command $dev] == {}} return
    # get old values of excitation amplitude and phase:
    set oamp1 [$dev cmd "SOUR1:VOLT?"]
    set oph1  [$dev cmd "SOUR1:PHAS?"]
    # change compensation amplitude and phase
    set amp2 [format "%.4f" [expr {$amp2 * $amp1/$oamp1}]]
    set ph1  [format "%.4f" [fix_phase $ph1]]
    set ph2  [format "%.4f" [fix_phase [expr {$ph2+$ph1-$oph1}]]]
    # change values in the generator
    $dev cmd "SOUR1:FREQ $fre"
    $dev cmd "SOUR1:VOLT $amp1"
    $dev cmd "SOUR2:VOLT $amp2"
    $dev cmd "SOUR1:PHAS $ph1"
    $dev cmd "SOUR2:PHAS $ph2"
    if {$lockin_int!={}} {$lockin_int update_val_w}
    $::pars(db_dev) cmd put $::pars(db_nmr_gen) now $fre $amp1 $ph1 $amp2 $ph2
  }

  method apply_comp {} {
    if {[info command $dev] == {}} return
    set ph2  [format "%.4f" [fix_phase $ph2]]
    $dev cmd "SOUR2:VOLT $amp2"
    $dev cmd "SOUR2:PHAS $ph2"
    if {$lockin_int!={}} {$lockin_int update_val_w}
    $::pars(db_dev) cmd put $::pars(db_nmr_gen) now $fre $amp1 $ph1 $amp2 $ph2
  }

  # read settings from generator device
  method update {} {
    if {[info command $dev] == {}} return
    set fre   [format "%.4f" [$dev cmd "SOUR1:FREQ?"]]
    set amp1  [format "%.4f" [$dev cmd "SOUR1:VOLT?"]]
    set amp2  [format "%.4f" [$dev cmd "SOUR2:VOLT?"]]
    set ph1   [format "%.4f" [$dev cmd "SOUR1:PHAS?"]]
    set ph2   [format "%.4f" [$dev cmd "SOUR2:PHAS?"]]
    set estate [$dev cmd "OUTP1?"]
    set cstate [$dev cmd "OUTP2?"]
  }

  method measure {} {
    if {[info command $dev] == {}} return
    return [list\
           [$dev cmd "SOUR1:FREQ?"]\
           [$dev cmd "SOUR1:VOLT?"]\
           [$dev cmd "SOUR2:VOLT?"]\
           [$dev cmd "SOUR1:PHAS?"]\
           [$dev cmd "SOUR2:PHAS?"]]
  }

  method switch_exc { {v {}} } {
    if {[info command $dev] == {}} return
    if {$v != {}} {set estate $v}
    $dev cmd OUTP1 [expr "$estate?ON:OFF"]
  }
  method switch_comp { {v {}} } {
    if {[info command $dev] == {}} return
    if {$v != {}} {set cstate $v}
    $dev cmd OUTP2 [expr "$cstate?ON:OFF"]
  }


  method fix_phase {ph} { return [expr $ph-int($ph/360.0)*360] }


  # calibrate compensation/excitation gains
  method calibrate {} {
    if {$lockin_int == {}} return
    # save original range
    set range [$lockin_int get_range]
    # read actual generator values
    update
    disable

    # calibrate excitation:
    switch_exc  1
    switch_comp 0
    # do measurement twice to wait for lock-in
    set v [$lockin_int get_auto]
    if {[llength $v]==0} {return}
    set x [lindex $v 0]
    set y [lindex $v 1]
    set r1 [expr {hypot($x,$y)}]
    set p1 [expr {atan2($y,$x)*$r2d}]


    # calibrate compensation:
    switch_exc  0
    switch_comp 1
    set v [$lockin_int get_auto]
    if {[llength $v]==0} {return}
    set x [lindex $v 0]
    set y [lindex $v 1]
    set r2 [expr {hypot($x,$y)}]
    set p2 [expr {atan2($y,$x)*$r2d}]

    # measure parameters
    update
    set egain [format "%.4e" [expr {$r1/$amp1}]]
    set cgain [format "%.4e" [expr {$r2/$amp2}]]
    set eturn [format "%.4f" [fix_phase [expr "$p1 - $ph1"]]]
    set cturn [format "%.4f" [fix_phase [expr "$p2 - $ph2"]]]
    $::pars(db_dev) cmd put $::pars(db_nmr_cal) now $egain $eturn $cgain $cturn

    # restore settings
    switch_exc  1
    switch_comp 1

    # compensate
    set amp2 [format "%.4f" [expr {$amp1 * $egain / $cgain}]]
    set ph2  [format "%.4f" [expr {(180 + $ph1 + $eturn) - $cturn}]]
    # apply_comp

    #restore lock_in range
    $lockin_int set_range $range
    $lockin_int update
    after 500 $this adjust_comp

    # enable buttons
    enable
  }

  # adjust compensation using old calibration
  # no change in lock-in and excitation settings
  method adjust_comp {} {
    if {$lockin_int == {}} return
    if {$cgain == 0} {calibrate}

    # measure value
    set v [$lockin_int get]
    if {[llength $v]==0} {return}
    set x [lindex $v 0]
    set y [lindex $v 1]
    set r [expr {hypot($x,$y)}]
    set p [expr {atan2($y,$x)*$r2d}]

    set damp2 [expr {-$r / $cgain}]
    set dph2  [expr {$p - $cturn}]

    set x [expr {$amp2*cos($ph2/$r2d) + $damp2*cos($dph2/$r2d)}]
    set y [expr {$amp2*sin($ph2/$r2d) + $damp2*sin($dph2/$r2d)}]

    set amp2 [format "%.4f" [expr {hypot($x,$y)}]]
    set ph2  [format "%.4f" [expr {atan2($y,$x)*$r2d}]]
    apply_comp
  }

}

##########################################################
# SetFreq interface
itcl::class FreqInt {

  variable widget {};
  variable btnlist {}

  public variable fmin 0.5e6
  public variable fmax 1.2e6
  public variable npt  100

  public variable gen_int {}
  public variable lockin_int {}


  constructor {widget_} {
    set widget $widget_
    set btnlist {}
    labelframe $widget -text "Set Frequency" -font {-weight bold -size 10}

    # Frequency/amplitude/phase entries
    foreach n {fmin fmax npt}\
            t {"Min freq, Hz:" "Max freq, Hz:" "Num.of points:"} {
      label $widget.${n}_l -text $t
      entry $widget.${n} -width 12 -textvariable [itcl::scope ${n}]
      grid $widget.${n}_l $widget.${n} -padx 5 -pady 2 -sticky e
    }

    # Apply/Update buttons
    button $widget.rbtn -text "Run"  -command "$this run"
    button $widget.sbtn -text "Stop" -command "$this stop"
    grid $widget.rbtn $widget.sbtn -padx 3 -pady 3
    lappend btnlist $widget.rbtn $widget.sbtn

    TimePlot setfre_plot $widget.setfre_pl\
      -ncols 2\
      -names {Freq Amp}\
      -plots_x {Freq}\
      -plots_y {Amp}
    grid $widget.setfre_pl -columnspan 2

#    disable
  }

  # enable/disable elements
  method disable {} { foreach ch [winfo children $widget] { $ch configure -state disabled } }
  method enable {}  { foreach ch [winfo children $widget] { $ch configure -state normal } }

  method set_bg {bg} {
    foreach ch [winfo children $widget] { $ch configure -background $bg }
    $widget configure -background $bg }

  method on {} {}
  method off {} {}

}


##########################################################


proc set_state {state} {
  set ::state $state
  if {$state} on else off
}

proc on {} {
  gen_int on
  lockin_int on
  fre_int on
}

proc off {} {
  lockin_int off
  gen_int off
  fre_int off
}

##########################################################

Device $pars(db_dev)

## make interface
LockinInt lockin_int $pars(gauge_dev) .l
grid .l -padx 5 -sticky new -column 1 -row 1

GenInt gen_int $pars(gen_dev) .g
gen_int configure -lockin_int lockin_int
grid .g -padx 5 -sticky new -column 1 -row 2

FreqInt fre_int .f
fre_int configure -lockin_int lockin_int
fre_int configure -gen_int gen_int
grid .f -padx 5 -sticky new -column 2 -row 1 -rowspan 2


checkbutton .oo -text "on/off" -variable ::state -command {set_state $::state}
grid .oo -sticky w -row 3 -columnspan 2


proc loop {} {
  lockin_int update_val
  $::pars(db_dev) cmd sync
  after 1000 loop
}

loop
