#!/usr/bin/wish

## Interface for noise measurements

package require Device 1.2
package require xBlt 3
package require Exp

# data for fft plot
blt::vector create fftx
blt::vector create ffty

# reference plot
blt::vector create refx
blt::vector create refy

# average plot
blt::vector create avrx
blt::vector create avry

set default_pars {
  osc_dev osc1  {oscilloscope device}
  chan    A     {}
  scale   0.05  {}
  dt      5e-8  {}
  npts    1e6   {numper of points to record}
  nout    1000  {number of points in the spectrum}
  fmin    {100} {}
  fmax    {}    {}
  tmin    {}    {}
  tmax    {}    {}
  log     1     {}
  delay   100   {delay between measurements, ms}
}

# pars - used in measurements, parsi - interface
foreach {name def title} $default_pars {
  set pars($name) $def
  set parsi($name) $def
}

set sigfile "/tmp/noise_${pars(osc_dev)}.sig"
set overload 0
set avr -1


##################################################
## do the measurement

proc do_meas {} {
  global pars overload sigfile avr

  # open devices if needed
  open_device

  # setup device and record the signal
  $pars(osc_dev) cmd chan_set $pars(chan) 1 AC $pars(scale)
  $pars(osc_dev) cmd trig_set NONE 0.1 FALLING 0
  $pars(osc_dev) cmd block $pars(chan) 0 $pars(npts) $pars(dt) $sigfile
  $pars(osc_dev) cmd wait

  # Overload check
  set re {s/^\s+chan:.*(1|0)$/\1/p}
  set overload [exec sed -r -n -e $re $sigfile]
  if {$overload == 1} {puts stderr "OVERLOAD"}

  ## load FFT
  ## build filter parameters:
  set fpars1 "-f fft_pow"
  set fpars2 "-N $pars(nout)"
  if {$pars(log) == 1}   {set fpars2 "$fpars2 -l"}
  if {$pars(fmin) != {}} {set fpars2 "$fpars2 -F $pars(fmin)"}
  if {$pars(fmax) != {}} {set fpars2 "$fpars2 -G $pars(fmax)"}
  if {$pars(tmin) != {}} {set fpars1 "$fpars1 -T $pars(tmin)"}
  if {$pars(tmax) != {}} {set fpars1 "$fpars1 -U $pars(tmax)"}
  set data [exec sig_filter {*}$fpars1 $sigfile {*}$fpars2]

  fftx set {}
  ffty set {}
  foreach {x y} $data {
    fftx append $x
    ffty append $y
  }

  ffty expr {sqrt(ffty)*1e9}

  # If averaging is runnint but array size has changed
  # then reset the averaging:
  if {$avr > 0 && [avrx length] != [fftx length] } {
    set avr 0
  }

  # If averaging is running:
  if {$avr > 0} {
    avry expr { avry * 1.0*$avr/($avr+1.0) + ffty * 1.0/($avr+1.0)}
  }

  # If averaging is resetted
  if {$avr == 0} {
    avrx set fftx
    avry set ffty
  }

  if {$avr>=0} {
    incr avr
    .avr configure -text "Averaging ($avr)"
  } else {
    .avr configure -text "Averaging (OFF)"
  }

#  close_device

  after [expr $pars(delay)] do_meas
}

##################################################

proc open_device {} {
  global pars
  if {![itcl::is object $pars(osc_dev)]} {
    Device $pars(osc_dev)
    $pars(osc_dev) lock
    if {! [regexp {^pico_rec} {*}[$pars(osc_dev) cmd *idn?]] } {
      error "unsupported osc device (pico_rec program is needed)"}
  }
  set range_values [lindex [$pars(osc_dev) cmd ranges $pars(chan)] 0]
  .acq.sc configure -values $range_values
}

proc close_device {} {
  global pars
  if {[itcl::is object $pars(osc_dev)]} {
    $pars(osc_dev) unlock
    itcl::delete object $pars(osc_dev)
  }
}

##################################################

######################################################
proc mk_fft_plot {pwid} {

  blt::graph $pwid -leftmargin 80
  pack $pwid -fill both -expand 1

  $pwid legend configure -activebackground white

  # configure standard xBLT things:
  xblt::plotmenu $pwid -showbutton 1 -buttonlabel Menu -menuoncanvas 0
  xblt::legmenu  $pwid -showseparator 0

  xblt::hielems $pwid
  xblt::crosshairs $pwid -show 1
  xblt::measure $pwid
  xblt::readout $pwid -variable v_readout -active 1
  xblt::zoomstack $pwid -axes {x y} -recttype xy
  $pwid element create avr -xdata avrx  -ydata avry -symbol "" -color green
  $pwid element create ref -xdata refx  -ydata refy -symbol "" -color red
  $pwid element create fft -xdata fftx  -ydata ffty -symbol "" -color blue
  $pwid axis configure y -title {Spectral density, nV/sqrt(Hz)} -logscale 1
  $pwid axis configure x -title {Frequency, Hz} -logscale 1
}
######################################################

mk_fft_plot .p

####################
## aquire frame: device, channel, scale, time step, points
labelframe .acq -text {Acquire signal}
label .acq.oscl  -text {Device: }
label .acq.chl   -text {Channel: }
label .acq.scl   -text {Scale [V]: }
label .acq.dtl   -text {dt [s]: }
label .acq.nptsl -text {Points: }
entry .acq.osc  -width 10 -textvariable parsi(osc_dev)
entry .acq.ch   -width 10 -textvariable parsi(chan)
ttk::combobox .acq.sc -width 9 -textvariable parsi(scale)
entry .acq.dt   -width 10 -textvariable parsi(dt)
entry .acq.npts -width 10 -textvariable parsi(npts)

grid .acq.oscl  .acq.osc  -sticky ne -pady 1
grid .acq.chl   .acq.ch   -sticky ne -pady 1
grid .acq.scl   .acq.sc   -sticky ne -pady 1
grid .acq.nptsl .acq.npts -sticky ne -pady 1
grid .acq.dtl   .acq.dt   -sticky ne -pady 1

####################
## fft frame
labelframe .fft -text FFT
label .fft.noutl -text {Points: }
label .fft.fminl -text {Fmin [Hz]: }
label .fft.fmaxl -text {Fmax [Hz]: }
label .fft.tminl -text {Tmin [s]: }

entry .fft.nout -width 10 -textvariable parsi(nout)
entry .fft.fmin -width 10 -textvariable parsi(fmin)
entry .fft.fmax -width 10 -textvariable parsi(fmax)
entry .fft.tmin -width 10 -textvariable parsi(tmin)
checkbutton .fft.log -text "Log.Freq" -variable parsi(log)

grid .fft.noutl .fft.nout -sticky ne -pady 1
grid .fft.fminl .fft.fmin -sticky ne -pady 1
grid .fft.fmaxl .fft.fmax -sticky ne -pady 1
grid .fft.tminl .fft.tmin -sticky ne -pady 1
grid .fft.log -columnspan 2 -pady 1 -sticky ne

####################
## apply/reset buttons for acquire and fft frames
frame .abtn
button .abtn.apply -text "Apply" -command settings_apply
button .abtn.reset -text "Reset" -command settings_reset
grid .abtn.apply .abtn.reset -sticky e

proc settings_apply {} {
  global pars parsi
  # TODO validate
  array set pars [array get parsi]
  .p axis configure x -title {Frequency, Hz} -logscale $pars(log)
}

proc settings_reset {} {
  global pars parsi
  array set parsi [array get pars]
}

####################
## reference frame
set ref_src "last"
labelframe .ref -text {Reference signal}
ttk::combobox .ref.src -width 8 -textvariable ref_src -values {last average}
button .ref.upd -text "Update" -command ref_upd
button .ref.clr -text "Clear" -command {refx set {}; refy set {}}
grid .ref.src .ref.upd .ref.clr -pady 2

proc ref_upd {} {
  global ref_src
  if { $ref_src == "last" } { refx set fftx; refy set ffty }\
  else { refx set avrx; refy set avry }
}

####################
## average frame
labelframe .avr -text {Avereging}
button .avr.start -text "Start" -command {set avr 0}
button .avr.stop  -text "Stop"  -command {set avr -1}
button .avr.clear -text "Clear" -command {set avr -1; avrx set {}; avry set {}}
grid .avr.start .avr.stop .avr.clear -sticky w -pady 2

button .avr.save -text "Save" -command on_save
grid .avr.save -sticky w

proc on_save {} {
  set fname [tk_getSaveFile\
    -confirmoverwrite 1\
    -initialdir .\
  ]
  if {$fname eq ""} return
  set f [open $fname w]
  puts $f {#Noise spectrum, written by noise_int program}
  puts $f {#f[Hz] -- V[nV/sqrt(Hz)]}
  for {set i 0} {$i<[avrx length]} {incr i} {
    puts $f "[avrx index $i] [avry index $i]"
  }
  close $f
}



####################
# pack top-level widgets
grid rowconfigure . 5 -weight 1; # last empty row
grid columnconfigure . 0 -weight 0
grid columnconfigure . 1 -weight 1

grid .p -column 1 -row 0 -rowspan 6 -sticky ewsn
grid .acq -sticky ewn -column 0 -row 0 -pady 1
grid .fft -sticky ewn -column 0 -row 1 -pady 1
grid .abtn -sticky esn -column 0 -row 2 -pady 1
grid .ref  -sticky ewn -column 0 -row 3 -pady 4
grid .avr  -sticky ewn -column 0 -row 4 -pady 4

settings_reset
do_meas
