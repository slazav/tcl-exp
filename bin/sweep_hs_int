#!/usr/bin/wish

## Interface for HS

package require Device 1.2
package require xBlt 3
package require Exp

### parameters

set pars(ps_dev)      ps1;  # power supply device
set pars(maxR)          5;  # max R, Ohm   // NOT USED
set pars(minR)          0;  # min R, Ohm   // NOT USED
set pars(minCR)       0.2;  # minimal current at which we can measure resistance, A
set pars(ovp)           5;  # overvoltage protection, V
set pars(ramp_tstep)    1;  # ramping time step
set pars(idle_tstep)  600;  # idle time step
set pars(maxI)        0.6;  # on current, A
set pars(minI)          0;  # off current, A
set pars(is_on)      0.55;  # "open"   if current is greater then this value, A
set pars(is_off)     0.01;  # "closed" if current is greater then this value, A
set pars(minI)          0;  # off current, A
set pars(rate)      0.005;  # rate, A/s  (0.02 A/s produce small heating of mixing chamber, 0.005 does not)

set pars(db)       db_exp;              # db device
set pars(db_val)   drydemag/sweep_hs;   # database name for sweeper values
set pars(db_ann)   drydemag/sweep_hs_a; # database name for sweeper annotations
set pars(db_cryo)  drydemag/comments;   # database name for high-level comments

set name "Heat Switch magnet"

##########################################################
## control functions (one can use this from external scripts)

set current 0; ## current value
set state 0;   ## does sweeper work

proc get_current {} {
  return $::current
}

proc is_open {} {
  global pars
  return [expr {$::current > $pars(is_on)}];
}

proc is_closed {} {
  global pars
  return [expr {$::current < $pars(is_off)}];
}

proc go_up {} {
  global pars
  if {$::state == 0} {return}
  if {$pars(db) != {} && $pars(db_cryo) != {}} {
    Device $pars(db)
    $pars(db) cmd put $pars(db_cryo) now "connect HS"
    itcl::delete object $pars(db)
  }
  sweeper sweep $pars(maxI) $pars(rate)
}

proc go_down {} {
  global pars
  if {$::state == 0} {return}
  if {$pars(db) != {} && $pars(db_cryo) != {}} {
    Device $pars(db)
    $pars(db) cmd put $pars(db_cryo) now "disconnect HS"
    itcl::delete object $pars(db)
  }
  sweeper sweep $pars(minI) $pars(rate)
}

proc do_reset {} {
  if {$::state == 0} {return}
  sweeper reset
}

proc do_on {} {
  sweeper turn_on
  .g.onoff configure -text "Turn OFF" -command do_off
  .f.go_down configure -state normal
  .f.go_up configure -state normal
  set ::state 1
}

proc do_off {} {
  sweeper turn_off
  .g.onoff configure -text "Turn ON" -command do_on
  .f.go_down configure -state disabled
  .f.go_up configure -state disabled
  set ::state 0
}

##########################################################
## function for Start/Stop/ToZero/Clear/Reset buttons

proc on_new_com {t com} {
  p add_comment $t $com
  return
}

## update values command
proc on_new_val {t cm cs vm {meas 0}} {
  global name
  set R [expr { $cm>0? $vm/$cm:0} ]
  p add_data $t [list $cm $R]
  set ::current $cm

  .n.state configure -text "[format %5.3f $cm] A"

  if     {[is_open]} {.n.state configure -fg green}\
  elseif {[is_closed]} {.n.state configure -fg red}\
  else {.n.state configure -fg black}

  .n.name configure -text "$name:"
  return
}



##########################################################
## make interface

  ######################
  # program title
  frame .n
  label .n.name   -text "$name" -font {-size 20}
  label .n.state  -text ""      -font {-size 20}
  pack .n.name .n.state -side left
  pack .n -anchor w

  ######################
  # buttons
  frame .f
  button .f.go_up   -text "Connect"   -command go_up -state disabled -bg #bdc1d4
  button .f.go_down -text "Discnnect" -command go_down -state disabled -bg #bdc1d4
  grid .f.go_up .f.go_down -padx 5
  pack .f -anchor w

  frame .g
  button .g.exit  -text "Exit"  -command exit
  button .g.onoff   -text "Turn ON" -command do_on
  grid .g.onoff .g.exit -sticky e
  pack .g -anchor e


  ######################
  # make graph
  TimePlot p .p -ncols 2 -maxt 600 -titles {I R} -names {I R}
  pack .p -fill both -expand 1

  ######################
  # exit button

##########################################################

update

## build sweeper object
SweepController sweeper\
  -ps_dev1    $pars(ps_dev)\
  -ps_dev2    {}\
  -gauge      {}\
  -db_dev     $pars(db)\
  -db_val     $pars(db_val)\
  -db_ann     $pars(db_ann)\
  -max_volt   $pars(ovp)\
  -max_rate   $pars(rate)\
  -ramp_tstep $pars(ramp_tstep)\
  -idle_tstep $pars(idle_tstep)\
  -on_new_val on_new_val\
  -on_new_com on_new_com
