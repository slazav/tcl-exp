#!/usr/bin/wish

## Interface for HS

package require Device 1.2
package require xBlt 3
package require Exp

### parameters

set par_list [list \
  name     {Heat Switch magnet} {program title}\
  ps_dev      ps1   {power supply device}\
  ovp           5   {overvoltage protection, V}\
  ramp_tstep    1   {ramping time step}\
  idle_tstep  600   {idle time step}\
  maxI        0.6   {on destination, A}\
  minI          0   {off destination, A}\
  is_on      0.55   {on limit, A}\
  is_off     0.01   {off limit, A}\
  rate       0.01   {rate, A/s}\
  db       db_exp               {db device}\
  db_val   drydemag/sweep_hs    {database for sweeper values}\
  db_ann   drydemag/sweep_hs_a  {database for sweeper annotations}\
  db_cryo  drydemag/comments    {database for high-level comments}\
]

foreach {name def title} $par_list { set pars($name) $def }


##########################################################
## control functions (one can use this from external scripts)

set current 0; ## current value
set state 0;   ## does sweeper work

proc get_current {} {
  return $::current
}

proc is_open {} {
  global pars
  return [expr {$::current > $pars(is_on)}];
}

proc is_closed {} {
  global pars
  return [expr {$::current < $pars(is_off)}];
}

proc go_up {} {
  global pars
  if {$::state == 0} {return}
  if {$pars(db) != {} && $pars(db_cryo) != {}} {
    Device $pars(db)
    $pars(db) cmd put $pars(db_cryo) now "connect HS"
    itcl::delete object $pars(db)
  }
  sweeper sweep $pars(maxI) $pars(rate)
}

proc go_down {} {
  global pars
  if {$::state == 0} {return}
  if {$pars(db) != {} && $pars(db_cryo) != {}} {
    Device $pars(db)
    $pars(db) cmd put $pars(db_cryo) now "disconnect HS"
    itcl::delete object $pars(db)
  }
  sweeper sweep $pars(minI) $pars(rate)
}

proc do_reset {} {
  if {$::state == 0} {return}
  sweeper reset
}

proc do_on {} {
  sweeper turn_on
  .g.onoff configure -text "Turn OFF" -command do_off
  .f.go_down configure -state normal
  .f.go_up configure -state normal
  set ::state 1
}

proc do_off {} {
  sweeper turn_off
  .g.onoff configure -text "Turn ON" -command do_on
  .f.go_down configure -state disabled
  .f.go_up configure -state disabled
  set ::state 0
}

##########################################################
## function for Start/Stop/ToZero/Clear/Reset buttons

proc on_new_com {t com} {
  p add_comment $t $com
  return
}

## update values command
proc on_new_val {t cm cs vm {meas 0}} {
  global pars
  set R [expr { $cm>0? $vm/$cm:0} ]
  p add_data $t [list $cm $R]
  set ::current $cm

  .n.state configure -text "[format %5.3f $cm] A"

  if     {[is_open]} {.n.state configure -fg green}\
  elseif {[is_closed]} {.n.state configure -fg red}\
  else {.n.state configure -fg black}

  .n.name configure -text "$pars(name):"
  return
}



##########################################################
## make interface

######################
# program title
frame .n
label .n.name   -text "$pars(name)" -font {-size 20}
label .n.state  -text ""      -font {-size 20}
pack .n.name .n.state -side left
pack .n -anchor w

######################
# buttons
frame .f
button .f.go_up   -text "Connect"   -command go_up -state disabled -bg #bdc1d4
button .f.go_down -text "Discnnect" -command go_down -state disabled -bg #bdc1d4
grid .f.go_up .f.go_down -padx 5
pack .f -anchor w

frame .g
button .g.exit  -text "Exit"  -command exit
button .g.onoff   -text "Turn ON" -command do_on
grid .g.onoff .g.exit -sticky e
pack .g -anchor e


blt::tabset .tabs -side top

######################
# make graph
TimePlot p .tabs.p -ncols 2 -maxt 600 -titles {I R} -names {I R}

######################
# parameter page
frame .tabs.pars
foreach {name def title} $par_list {
  label .tabs.pars.l:$name -text "$title:"
  label .tabs.pars.$name -text "$def" -font bold
  grid .tabs.pars.l:$name .tabs.pars.$name -sticky w
}

.tabs insert end plot -window .tabs.p\
   -anchor n -text "Plot" -fill both
.tabs insert end pars -window .tabs.pars\
   -anchor n -text "Rarameters" -fill both
pack .tabs -fill both -expand 1



##########################################################

update

## build sweeper object
SweepController sweeper\
  -ps_dev1    $pars(ps_dev)\
  -ps_dev2    {}\
  -gauge      {}\
  -db_dev     $pars(db)\
  -db_val     $pars(db_val)\
  -db_ann     $pars(db_ann)\
  -max_volt   $pars(ovp)\
  -max_rate   $pars(rate)\
  -ramp_tstep $pars(ramp_tstep)\
  -idle_tstep $pars(idle_tstep)\
  -on_new_val on_new_val\
  -on_new_com on_new_com
