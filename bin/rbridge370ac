#!/usr/bin/wish

package require Device2
package require Exp;  # timeplot, monitor
package require itcl;

##########################################################################
## read parameters from configuration file

set scan_modes {{OFF} {Measure single channel} {Scan all channels} {Scan and Measure}}

set default_pars {
  name         {Resistance bridge}  {program name}
  period       0.5        {measurement period, s}
  dev          {bridge}   {LakeShore device}
  nchan        {16}       {number of channels (depends on scanner model)}
  db_dev       {db}       {database device}
  db_names     {R01 R02 R03 R04 R05 R06 R07 R08 R09 R10 R11 R12 R13 R14 R15 R16} {databases for each channel}
  ch_names     {{1K pot} {20mK} {h.e.#2} {h.e.#4}\
                {h.e.#6} {h.e.#8} {h.e.#10} {Mix.Ch.}\
                {1K PT1000} {Still} {20mK PT1000} {20mk shield}\
                {Mix. SMB conn} {Mix. conn} {Mix PT1000} {Mix Speer} } {Channel names (instead of 1,2,3 etc)}
  scanmode     {Scan all channels} {Original value of scanmode switch}
  mchan        {1} {Original value of measured channel switch}
  curve_dir    {.} {Default directory for calibration curves}
  timeout     {30} {How long we want to stay at one channel in autoscan mode [s]; 0 - forever}
}

if {[llength $argv]>0 } {
  read_conf [lindex $argv 0] pars $default_pars
}\
else {
  foreach {name def title} $default_pars { set pars($name) $def }
}

tk appname $pars(name)

##########################################################################

itcl::class DevPanel {
  variable dev;
  variable root;

  variable id;
  variable mon;
  variable guard; # 0|1

  variable tst;   # text: OK|FAIL

#  variable ese;
#  variable esr;
#  variable opc;
#  variable sre;
#  variable stb;

  constructor {r d} {
    set dev $d
    set root $r
    frame $root

    mk_label $root.id  [itcl::scope id]  "Device ID: "
    mk_combo $root.mon [itcl::scope mon] "Monitor source: "

    $root.mon  configure -values [$dev mon_src_list]

    set help [join {\
      {Source for monitor signal (rear-panel connector):}\
      {Off: Output grounded to measurement common}\
      {CS_NEG: AC voltage driving negative side of current source programming resistor}\
      {CS_POS: AC voltage driving positive side of current source programming resistor}\
      {VAD_DC: voltage into the AD converter}\
      {VCM_NEG: AC voltage on the negative side of the differential input amplifier}\
      {VCM_POS: AC voltage on the positive side of the differential input amplifier}\
      {VDIF: AC voltage output of the differential input amplifier}\
      {VMIX: Conditioned AC input voltage at input of the product detector}\
    } \n\n]

    bind $root.mon_l <ButtonPress> "tk_messageBox -type ok -message \"$help\""

    mk_label $root.tst [itcl::scope tst] "Power-up self-test: "
    mk_check $root.guard [itcl::scope guard] "Use Guard Drive"

#    mk_label ese  "ESE"
#    mk_label esr  "ESR"
#        mk_label opc  "OPC"
#        mk_label sre  "SRE"
#        mk_label stb  "STB"

    ######
    # Write/Read buttons
    set f [frame $root.btn]
    grid $f -sticky w -pady 5

    button $f.read  -text "Read"  -command "$this read_pars"
    button $f.write -text "Write" -command "$this write_pars"
    pack $f.read $f.write -anchor e -side right
  }

  # re-read all parameters
  method read_pars {} {
    set id  [$dev get_id]
    set mon [$dev get_mon]
    set tst [expr {[$dev get_tst] ? {FAIL}:{OK}}]
    set guard [$dev get_guard]

#    # Status byte register
#    set s [$dev cmd *ESE?]
#    if { $s & (1<<7) } { puts "Ramp done"}
#    if { $s & (1<<6) } { puts "SRQ" }
#    if { $s & (1<<5) } { puts "ESB: status register set" }
#    if { $s & (1<<4) } { puts "Error (8.6)" }
#    if { $s & (1<<3) } { puts "Alarm" }
#    if { $s & (1<<2) } { puts "Valid read" }
#
#    # Standard event status register
#    set s [$dev cmd *ESR?]
#    if { $s & (1<<7) } { puts "PON: power on"}
#    if { $s & (1<<5) } { puts "CME: Command error"}
#    if { $s & (1<<4) } { puts "EXE: Execution error"}
#    if { $s & (1<<2) } { puts "QYE: Query error"}
#    if { $s & (1<<0) } { puts "OPC: Operation complete"}
#
#    set opc [$dev cmd *OPC?]
#    set sre [$dev cmd *SRE?]
#    set stb [$dev cmd *STB?]
  }


  # write parameters to the device
  method write_pars {} {
    $dev set_mon $mon
    $dev set_guard $guard
    read_pars
  }

};

##########################################################################
# panel for manipulating temperature calibration curves

itcl::class CurvePanel {
  variable dev;
  variable root;
  variable sel 1; # selected curve
  variable curve_dir {.}; # default directory for curves

  # curve header parameters (arrays)
  variable name;
  variable serial;
  variable fmt;
  variable limit;
  variable coeff;

  constructor {r d dir} {
    set dev $d
    set root $r
    set curve_dir $dir

    frame $root
    set f [labelframe $root.crvs -text "Calibration curves:"]
    grid $f -sticky w -pady 5

    label $f.num    -text N
    label $f.name   -text Name -width 15
    label $f.serial -text Serial -width 10
    label $f.fmt    -text Format
    label $f.limit  -text Limit
    label $f.coeff  -text T.Coeff
    grid $f.num $f.name $f.serial\
         $f.fmt $f.limit $f.coeff

    frame $f.hsep -relief groove -borderwidth 1 -height 2
    grid $f.hsep -columnspan 6 -sticky we -pady 5

    for {set i 1} {$i<=20} {incr i} {
      radiobutton $f.num$i -text $i -variable [itcl::scope sel] -value $i
      label $f.name$i   -textvariable [itcl::scope name($i)] -width 15
      label $f.serial$i -textvariable [itcl::scope serial($i)] -width 10
      label $f.fmt$i    -textvariable [itcl::scope fmt($i)]    -width 10
      label $f.limit$i  -textvariable [itcl::scope limit($i)]
      label $f.coeff$i  -textvariable [itcl::scope coeff($i)]
      grid $f.num$i $f.name$i $f.serial$i\
           $f.fmt$i $f.limit$i $f.coeff$i
    }
    # read button
    button $f.read  -text "Update information" -command "$this read_pars"
    grid $f.read -columnspan 6 -sticky e -padx 5

    # Save/load buttons
    set f [labelframe $root.btns_sel -text "Selected curve:"]
    grid $f -sticky w -pady 5

    button $f.save -text "Save to file"   -command "$this save_sel"
    button $f.load -text "Load from file" -command "$this load_sel"
    button $f.del  -text "Delete"         -command "$this del_sel"
    pack $f.save $f.load $f.del -anchor e -side right

    # Save/load_all buttons
    set f [labelframe $root.btns_all -text "Save/load all curves to a folder"]
    grid $f -sticky w -pady 5

    button $f.save -text "Save all curves" -command "$this save_all"
    button $f.load -text "Load all curves" -command "$this load_all"
    pack $f.save $f.load -anchor e -side right

    # status label
    label $root.status -foreground red
    grid $root.status -sticky w -pady 5
  }

  # read single curve header (and update interface)
  method read_head {n} {
    set l [$dev get_crv_hdr $n]
    set name($n)   [lindex $l 0]
    set serial($n) [lindex $l 1]
    set fmt($n)    [lindex $l 2]
    set limit($n)  [lindex $l 3]
    set coeff($n)  [lindex $l 4]
  }

  # update interface for all curve
  method read_pars {} {
    for {set i 1} {$i<=20} {incr i} { read_head $i }
  }

  method save_sel {} {
    set fname [tk_getSaveFile\
      -confirmoverwrite 1\
      -initialdir $curve_dir\
    ]
    lock_int 1 "Saving curve $sel to file $fname"
    $dev save_curve $sel $fname
    lock_int 0 ""
  }

  method load_sel {} {
    set fname [tk_getOpenFile\
      -initialdir $curve_dir\
    ]
    lock_int 1 "Loading curve $sel from file $fname"
    $dev load_curve $sel $fname
    read_head $sel
    lock_int 0 ""
  }

  method del_sel {} {
    lock_int 1 "Deleting curve $sel"
    $dev del_curve $sel
    read_head $sel
    lock_int 0 ""
  }

  method save_all {} {
    set fdir [tk_chooseDirectory -initialdir $curve_dir ]
    for {set n 1} {$n<=20} {incr n} {
      set fname [format "$fdir/curve_%02d" $n]
      lock_int 1 "Saving curve $n to file $fname"
      $dev save_curve $n $fname
    }
    lock_int 0
  }

  method load_all {} {
    set fdir [tk_chooseDirectory -initialdir $curve_dir ]
    $dev load_all_curves $dir
    for {set n 1} {$n<=20} {incr n} {
      set fname [format "$fdir/curve_%02d" $n]
      lock_int 1 "Loading curve $n from file $fname"
      $dev load_curve $n $fname
      read_head $n
    }
    lock_int 0
  }

  method lock_int {on msg} {
    foreach i [list $root.btns_all.save $root.btns_all.load\
               $root.btns_sel.save $root.btns_sel.load $root.btns_sel.del] {
      $i configure -state [expr {$on? {disabled}:{active}}]
    }
    $root.status configure -text $msg
  }

}

##########################################################################
# panel for a single channel parameters

itcl::class ChanPanel {
  variable root;
  variable dev;
  variable chan;

  # measured values and status
  variable res  0; # resistance, Ohm
  variable temp 0; # temperature, K
  variable pwr  0; # power, W
  variable status; # channel status (overloads)
  variable onscan; # is channel scanned now (text!)
  variable timer {};  # autoscan timer
  variable gtimer {}; # global timer (how long we want t stay a this channel)

  # input settings
  variable onoff {};
  variable dwell 0;
  variable pause 3;
  variable curve {};
  variable tempco {};

  # range and excitation
  variable exc_on {};
  variable arange 1;
  variable exc_type  {};
  variable exc_range {};
  variable res_range {};

  # filter
  variable flt_on 0;
  variable flt_time 1;
  variable flt_win  {}

  # display
  variable displ_name Resistance;

  ###################################
  ## constructor: build the interface
  constructor {r d c} {
    set root $r
    set dev  $d
    set chan $c

    ######
    # channel panel consists of two parts: parameter panel and plot
    frame $root
    frame $root.pars
    TimePlot pl$chan $root.plot\
      -ncols 3\
      -maxn 0\
      -maxt 100000\
      -names {res temp pwr}\
      -titles {Resistance Temperature Power}\
      -plots_x {time pwr res}\
      -plots_y {{} {res temp} temp}\
      -zstyles {x xy xy}\
      -symbols {circle circle circle}\
      -use_comm 0

    grid columnconfigure $root 0 -weight 0
    grid columnconfigure $root 1 -weight 1
    grid rowconfigure    $root 0 -weight 1

    grid $root.pars -column 0 -row 0 -sticky ewn
    grid $root.plot -column 1 -row 0 -sticky ewsn

    ######
    # Display frame
    set f [frame $root.pars.disp]
    pack $f -fill x -expand 1 -pady 2
    mk_combo $f.name [itcl::scope displ_name] "Display: "
    $f.name configure -values {Resistance Temperature Power}

    mk_check $f.onoff  [itcl::scope onoff] "channel ON/OFF"
    $f.onoff configure -command "$this onoff"

    ######
    # Measured values and status
    set f [labelframe $root.pars.val -text "Measured values and status"]
    pack $f -fill x -expand 1 -pady 2

    label $f.onscan -textvariable [itcl::scope onscan] -fg green
    grid $f.onscan -columnspan 2 -sticky nw

    mk_label $f.res  [itcl::scope res]  "Resistance, Ohm:"
    mk_label $f.temp [itcl::scope temp] "Temperature, K:"
    mk_label $f.pwr  [itcl::scope pwr]  "Power, W:"

    label $f.status -textvariable [itcl::scope status] -fg red
    grid $f.status -columnspan 2 -sticky nw

    set help [join {\
      {CS_OVL: Current source overload possibly caused by a broken current source lead.}\
      {VCM_OVL: Common mode overload at the first amplifier stage of the voltage input.}\
      {VDIF_OVL: Overload at the differential amplifier stage of the voltage input.}\
      {VMIX_OVL: Overload at the mixer (phase sensitive detector) stage of the voltage input.}\
      {R_OVER: Resistance range overload.}\
      {R_UNDER: Resistance range underload (equivalent of R. OVER in the negative direction) normally a result of improper lead wiring.}\
      {T_OVER: Measured resistance is outside of the temperature response curve on the high temperature end.}\
      {T_UNDER: Measured resistance is outside of the temperature response curve on the low temperature end.}\
    } \n\n]

    bind $f.status <ButtonPress> "tk_messageBox -type ok -message \"$help\""

    ######
    # Input settings frame

    set f [labelframe $root.pars.inp -text "Input settings"]
    pack $f -fill x -expand 1 -pady 2
    mk_entry $f.dwell  [itcl::scope dwell] "Scanner dwell time, s: "
    mk_entry $f.pause  [itcl::scope pause] "Pause time, s: "
    mk_entry $f.curve  [itcl::scope curve] "Temperature curve: "

    bind $f.dwell_l <ButtonPress> {
     tk_messageBox -message "How long the value is measured in autoscan mode: 1..200s. This time starts after pause and filter settle time."}

    bind $f.pause_l <ButtonPress> {
     tk_messageBox -message "How long to wait after range or channel change before starting the measurement: 3..200s"}

    bind $f.curve_l <ButtonPress> {
     tk_messageBox -message "Thermometer calibration curve: 1..20. No curve: 0"}


    ######
    # Range and excitation settings

    set f [labelframe $root.pars.exc -text "Range and excitation"]
    pack $f -fill x -expand 1 -pady 2

    mk_check $f.arange [itcl::scope arange] "autorange"
    mk_combo $f.res_range [itcl::scope res_range] "Resistance range: "
    mk_check $f.exc_on [itcl::scope exc_on] "excitation ON/OFF"
    mk_combo $f.exc_type  [itcl::scope exc_type]  "Excitation type: "
    mk_combo $f.exc_range [itcl::scope exc_range] "Excitation range: "

    $f.exc_type  configure -values [$dev exc_list]
    $f.exc_range configure -values [$dev volt_list]
    $f.res_range configure -values [$dev res_list]

    trace add variable [itcl::scope exc_type] write "$this set_exc_lists"

    ######
    # Filter settings

    set f [labelframe $root.pars.flt -text "Filter"]
    pack $f -fill x -expand 1 -pady 2
    mk_check $f.flt_on [itcl::scope flt_on]   "filter ON/OFF"
    mk_entry $f.settle [itcl::scope flt_time] "Settle time, s: "
    mk_entry $f.window [itcl::scope flt_win]  "Window, \%: "

    bind $f.window_l <ButtonPress> {
     tk_messageBox -message "Window, \% of full scale. If signal goes out of the window filter is restarted."}

    ######
    # Write/Read buttons
    set f [frame $root.pars.btn]
    pack $f -fill x -expand 1 -pady 2

    button $f.switch  -text "Switch to channel"  -command "::switch_chan $chan"
    button $f.read  -text "Read"  -command "$this read_pars"
    button $f.write -text "Write" -command "$this write_pars"
    pack $f.switch -anchor e -side left
    pack $f.read $f.write -anchor e -side right

    ######
    # update channel information
    set onoff [lindex [$dev get_ch_inp $chan] 0]
  }
  ###################################

  method set_exc_lists {args} {
    if {$exc_type == {voltage}} {
       $root.pars.exc.exc_range configure -values [$dev volt_list]
    } else {
       $root.pars.exc.exc_range configure -values [$dev curr_list]
    }
  }

  ###################################

  method read_pars {} {

    # Measured values
    set res [$dev get_ch_res  $chan]
    set temp [$dev get_ch_temp $chan]
    set pwr [$dev get_ch_pwr  $chan]

    # status
    set status {}
    foreach s [$dev get_ch_status $chan] {
      lappend status [lindex [$dev ch_status_list] $s]
    }
    set status [join $status { }]

    # Input parameters
    set r [$dev get_ch_inp $chan]
    set onoff  [lindex $r 0]
    set dwell  [lindex $r 1]
    set pause  [lindex $r 2]
    set curve  [lindex $r 3]
    set tempco [lindex $r 4]

    # Range and excitation
    set r [$dev get_ch_range $chan]
    set exc_type  [lindex $r 0]
    set exc_range [lindex $r 1]
    set res_range [lindex $r 2]
    set arange    [lindex $r 3]
    set exc_on    [lindex $r 4]

    # Filter
    set r [$dev get_ch_filter $chan]
    set flt_on     [lindex $r 0]
    set flt_time   [lindex $r 1]
    set flt_win    [lindex $r 2]

    # Scan
    set r [$dev get_scan]
    set onscan [expr {[lindex $r 0] == $chan ? {Scanning...}:{}}]
  }

  # measurement
  # returns a list [value status color]
  method measure {{autoscan 0} {timeout 0} {db_dev {}} {db_name {}}} {

    # channel is off
    if {!$onoff} {return [list {} OFF red]}

    set onscan {Measuring...}

    # Measured values
    set res [$dev get_ch_res  $chan]
    set temp [$dev get_ch_temp $chan]
    set pwr [$dev get_ch_pwr  $chan]

    # get status
    # if status = T_UNDER or T_OVER do not fail but set temp=0
    set status {}
    set fail 0
    foreach s [$dev get_ch_status $chan] {
      set st_str [lindex [$dev ch_status_list] $s]
      if {$st_str == "T_OVER"} { set temp 0 }\
      elseif {$st_str == "T_UNDER"} { set temp 0 }\
      else {set fail 1}
      lappend status $st_str
    }
    set status [join $status { }]

    # update range
    set old_range $res_range
    if {$arange} {
      set r [$dev get_ch_range $chan]
      set res_range [lindex $r 2]
    }

    # format display value:
    if {$displ_name == "Resistance"} {
      set val $res
      if     {$res > 1e6}    {set val [format "%7g MOhm" [expr $res/1e6]]}\
      elseif {$res > 1e3}    {set val [format "%7g kOhm" [expr $res/1e3]]}\
      elseif {$res > 1 }     {set val "$res Ohm"}\
      else                   {set val [format "%7g mOhm" [expr $res*1e3]]}
    } elseif {$displ_name == "Temperature"} {
      if     {$temp > 1}     {set val "$temp K"}\
      else                   {set val [format "%7g mK" [expr $temp*1e3]]}
    } elseif {$displ_name == "Power"} {
      if     {$pwr > 1}      {set val "$pwr W"}\
      elseif {$pwr > 1e-3}   {set val [format "%7g mW" [expr $pwr*1e3]]}\
      elseif {$pwr > 1e-6}   {set val [format "%7g uW" [expr $pwr*1e6]]}\
      elseif {$pwr > 1e-9}   {set val [format "%7g nW" [expr $pwr*1e9]]}\
      elseif {$pwr > 1e-12}  {set val [format "%7g pW" [expr $pwr*1e12]]}\
      else                   {set val [format "%7g fW" [expr $pwr*1e15]]}
    }


    # Global timer: for how long we want so say at this channel
    # without any measurements before returning Timeout status
    if {$gtimer == {}} {set gtimer [clock seconds]}

    if {$timeout > 0 && [clock seconds] - $gtimer  > $timeout} {
       return [list Timeout Timeout red] }



    # Timer: for how long we want to wait before filter time and
    # dwell tme is expied and we can return OK status.
    # timer is reset when range is changes or error occures.

    # Wait before recording measurement value
    set del $pause
    if {$flt_on} {set del [expr $del+$flt_time]}
    if {$autoscan} {set del [expr $del+$dwell]}

    if {$timer == {} ||
        $old_range != $res_range} {set timer [clock seconds]}

    set dt [expr "$timer - [clock seconds] + $del"]

    if {$dt>0} { return [list $val "Wait: ${dt}s" #606000] }

    # Do not save values if $fail==1
    if {$fail} {
      set timer {}
      return [list Error $status red]
    }



    # Add timestamp and measured data to the plot
    set tt [expr {[clock milliseconds]/1000.0}]
    pl$chan add_data [list $tt $res $temp $pwr]

    # Add data to the database
    if {$db_dev != {} && $db_name != {}} {
      $db_dev cmd put $db_name $tt $res $temp $pwr
      $db_dev cmd sync
    }

    set gtimer {}
    return [list $val OK green]
  }

  method stop_meas {} {
    set onscan {}
    set timer {}
    set gtimer {}
  }

  method write_pars {} {
    $dev set_ch_range  $chan $exc_type $exc_range $res_range $arange $exc_on
    $dev set_ch_inp    $chan $onoff $dwell $pause $curve $tempco
    $dev set_ch_filter $chan $flt_on $flt_time $flt_win
    after 50
    read_pars
    stop_meas
  }

  method is_on {} {return $onoff}

  method onoff {{val {}}} {
    if {$val == {}} {set val $onoff}
    $dev ch_onoff $chan $val
    set onoff $val
  }
}

##########################################################################

# switch bridge to another channel
proc switch_chan {new_ch} {
  global br chan
  set old_ch [lindex [$br get_scan] 0]
  ch_pan$old_ch stop_meas
  set chan $new_ch
  $br set_scan $new_ch 0
  after 100
}

# Select channel in the tab.
# Note: channel numbers start from 1, tab indices start from 0!
proc switch_tab {ch} {
  .tabs select [expr $ch-1];
  .tabs invoke [expr $ch-1]
  update_scan
}

proc update_scan {} {
  global pars
  set sel [.tabs index [.tabs get select]]
  for {set ch 0} {$ch<$pars(nchan)} {incr ch} {
    .scan.n[expr $ch+1]  configure -relief [expr {$ch == $sel? "sunken":"flat"}]
  }
}

##########################################################################

Device $pars(dev)
set br [LakeShore370AC br#auto $pars(dev)]

if {$pars(db_dev) != {} } { Device $pars(db_dev) }


set r [$br get_scan]
set chan [lindex $r 0]

# set hardware autoscan to 0
lset r 1 0
$br set_scan {*}$r


# tabset
blt::tabset .tabs

# scan panel
frame .scan

for {set ch 1} {$ch <= $pars(nchan)} {incr ch} {
  # create channel panel
  ChanPanel ch_pan$ch .tabs.ch$ch $br $ch
  .tabs insert end ch_pan$ch -window .tabs.ch$ch\
     -anchor n -text $ch -fill both -padx 3 -pady 3 -command update_scan

  # read parameters from the device
  ch_pan$ch read_pars

  # name to show in the scan panel
  set name "$ch"
  if {[llength $pars(ch_names)] > $ch-1} {
    set name "$name. [lindex $pars(ch_names) [expr $ch-1]]"
  }

  canvas .scan.i$ch -width 10 -height 10
  label .scan.n$ch -justify left -anchor w -text $name -borderwidth 1 -relief flat
  label .scan.v$ch -width 12 -justify left -anchor w
  grid .scan.i$ch .scan.n$ch .scan.v$ch -sticky w
  bind .scan.n$ch  <ButtonPress> "switch_tab $ch"
  bind .scan.v$ch   <ButtonPress> "switch_tab $ch"
}

switch_tab 1

frame .scan.hsep -relief groove -borderwidth 1 -height 2
grid .scan.hsep -columnspan 3 -sticky we -pady 5

#label .scan.mode_l -text "Scan mode:"
ttk::combobox .scan.mode -textvariable pars(scanmode)
.scan.mode configure -values $scan_modes
grid x .scan.mode -sticky nw -columnspan 2

label .scan.mchan_l -text "Measured channel:"
ttk::combobox .scan.mchan -textvariable pars(mchan) -width 3
grid x .scan.mchan_l .scan.mchan -sticky nw

grid .scan -column 0 -row 0 -sticky ewn
grid .tabs -column 1 -row 0 -sticky ewsn
grid columnconfigure . 0 -weight 0
grid columnconfigure . 1 -weight 1
grid rowconfigure    . 0 -weight 1

# device panel
DevPanel dev_pan .tabs.dev $br
.tabs insert end dev_pan -window .tabs.dev\
   -anchor n -text Device -fill both -padx 3 -pady 3
dev_pan read_pars

# curves panel
CurvePanel crv_pan .tabs.crv $br $pars(curve_dir)
.tabs insert end crv_pan -window .tabs.crv\
   -anchor n -text Curves -fill both -padx 3 -pady 3
crv_pan read_pars

# in scan-and-measure mode we want to keep number of previously measured channel
set prev_chan $chan

proc on_meas {} {
  # scanned channel
  global br
  global pars chan
  global scan_modes
  global prev_chan

  # If scan mode == OFF do nothing
  if {$pars(scanmode) == {OFF}} return

  ##############
  # update current channel
  set chan [lindex [$br get_scan] 0]

  ##############
  # update interface
  set chlist {}
  for {set ch 1} {$ch <= $pars(nchan)} {incr ch} {

    # disable non-working channels in the list
    if {[ch_pan$ch is_on]} {
      .scan.n$ch configure -state normal
      lappend chlist $ch
    }\
    else {
      .scan.n$ch configure -state disabled
      .scan.v$ch configure -text {}
    }

    # draw icon for currently measured channel
    if {$ch==$chan} {
      #.scan.i$ch create polygon 1 1 10 5 1 10 -fill green -tags r
      .scan.i$ch create polygon 2 2 9 5 2 9 -fill black -tags r
      #.scan.i$ch create oval 3 3 7 7 -fill black -tags r
    }\
    else {
      .scan.i$ch delete r
    }
  }
  # update list of channels in Measured channel selector
  .scan.mchan configure -values $chlist

  # update value in Measured channel selector
  for {set i 0} {$i<$pars(nchan)} {incr i} {
    if {[$br is_ch_on $pars(mchan)]} break
    set pars(mchan) [expr {$pars(mchan)%$pars(nchan) + 1}]
  }

  set autoscan [expr {$pars(scanmode) != {Measure single channel}}]

  set db_name ""
  if {$pars(db_dev) != {} && [llength $pars(db_names)] > $chan-1 } {
    set db_name [lindex $pars(db_names) [expr $chan-1]]
  }

  ##############
  # do measurement
  set ret [ch_pan$chan measure $autoscan [expr $autoscan? $pars(timeout):0] $pars(db_dev) $db_name]

  set val [lindex $ret 0]
  set st  [lindex $ret 1]
  set col [lindex $ret 2]
  set wait [expr {[string range $st 0 3] == "Wait"}]

  m set_status "Measuring CH$chan: $st" $col
  .scan.v$chan configure -fg $col -text $val

  # If wait=true we don't want to switch channels.
  if {$wait} {return}

  # Find next channel:
  set next_chan $chan
  if {$pars(scanmode) == {Measure single channel}} {
    # In measurement mode it is always $pars(mchan)
    set next_chan $pars(mchan)
  }\
  elseif {$pars(scanmode) == {Scan all channels}} {
    # In scan mode we should find next available channel
    set next_chan $chan
    for {set i 0} {$i<$pars(nchan)} {incr i} {
      set next_chan [expr {$next_chan%($pars(nchan)) + 1}]
      if {[$br is_ch_on $next_chan]} break
    }
  }\
  elseif {$pars(scanmode) == {Scan and Measure}} {
    # In scan-and-measure mode we should switch from $pars(mchan)
    # to $prev_chan+1 (excluding $pars(mchan)) and then back
    if {$chan == $pars(mchan)} {
      set next_chan $prev_chan
      for {set i 0} {$i<$pars(nchan)} {incr i} {
        set next_chan [expr {$next_chan%$pars(nchan) + 1}]
        if {$next_chan == $pars(mchan)} continue
        if {[$br is_ch_on $next_chan]} break
      }
    }\
    else {
      set prev_chan $chan
      set next_chan $pars(mchan)
    }
  }

  # switch to next channel
  if {$chan != $next_chan} { switch_chan $next_chan }

}



# monitor
Monitor m .mon -name $pars(name) -period $pars(period)\
   -func_meas on_meas\
   -func_mkint {} -func_start {} -func_stop {}\
   -show_ctl 0 -show_title 0 -verb 0

grid .mon -columnspan 2 -sticky we

m restart; # start measurements

wm protocol . WM_DELETE_WINDOW { m do_exit }


