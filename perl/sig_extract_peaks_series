#!/usr/bin/perl
use strict;
use warnings;
use JSON;
use lib qw(/home/sla/PROG/exp_scripts/perl/);
use sigproc;


my $prog = $0;
$prog =~s|^.*/([^/]*$)|$1|;

`sig_mk_fig *.sig`;

############################################################
############################################################
# Extract peak information from inf-files and print it as a table
# Group signals by Uexc and Grad, create subfolders

############################################################
my $ts=0; # temperature sum
my $n=0;  # temperature counter
my $ptn=0; # point counter
my $dir;
my %ids;  # old excitation

opendir SD, "." or die "can't open sig folder: .: $!\n";
foreach my $sig (sort readdir SD){
  next unless $sig=~/\.sig$/;
  next if $sig=~/^_/;
  next if $sig=~/^_p\.sig/;


  my $pars = sigproc::read_sig_info($sig);
  next unless exists $pars->{fig_peaks} && $#{$pars->{fig_peaks}}>-1;

  my $fre  = $pars->{fre};
  my $exc  = $pars->{exc};
  my $grad = $pars->{grad}*1000;
  my $quad = $pars->{quad}*1000;
  my $temp = $pars->{temp}*1000;
  my $dfdt = $pars->{dfdt};
  my $df   = $pars->{larm_df} || 0;

  my $id = sprintf("%.2f_%.0f", $exc, $grad);
  # goto next point
  if (exists $ids{$id}) {
    $ts/=$n; $n=0;
    %ids = ();
  }

  # new point
  if ($n==0){
    $ptn++;
    $dir = sprintf("pt%03d", $ptn);
    `mkdir -p $dir`;
    `rm -f $dir/*.peak $dir/temp.txt $dir/time.txt`;
     print STDERR "$ptn\n";
  }

  print STDERR "  $id - $n -- $sig\n";

  $n++;
  $ts+=$temp;
  $ids{$id}=1;

  `echo $temp >> $dir/temp.txt`;
  `echo $pars->{t1abs} >> $dir/time.txt`;
  `echo $pars->{t2abs} >> $dir/time.txt`;

  foreach my $p (@{$pars->{fig_peaks}}){
    my @T = @{$p->{T}};
    my @F = @{$p->{F}};
    my @A = @{$p->{A}};
    my @Q = @{$p->{Q}};
    my @DF;
    my @FF;
    next unless $#T >-1;

    # skip larmor peak
    $p->{name} = "larm" if $p->{name} eq "l";
    next if $p->{name} eq "larm";

    # convert time to freq.shift, scale x2, x3 etc peaks:
    for (my $i=0; $i<$#T; $i++){
      $DF[$i] = $T[$i]*$dfdt-$df;
      $F[$i]/=$1 if $p->{name}=~/(\d)$/;
    }
    # remove numbers from names:
    $p->{name}=~s/\d$//;

    open OUT, ">> $dir/${id}_$p->{name}.peak"
      or die "can't open file: $dir/${id}_$p->{name}.peak: $!";
    print OUT "# $sig\n";
    # print raw peak data
    for (my $i=0; $i<$#T; $i++){
      printf OUT "%e %e %e %e\n", $DF[$i], $F[$i], $A[$i], $Q[$i];
    }
    print OUT "\n";
    close OUT;
  }
}


my $graphene = 'graphene -d /home/exports/DB';

for (my $i=1; ;$i++){
  my $dir = sprintf("pt%03d", $i);
  opendir PD, $dir or last;
  open O, "> $dir/plot" or die "can't open plot file: $!\n";
  my @sigs;
  my $n=0;

  # get min/max time from file $dir/time.txt;
  # use db to get mean temperature
  my $temp=0;
  if (open T, "$dir/time.txt"){
    my ($t1,$t2);
    foreach (<T>){
      chomp;
      $t1 = $_ if !$t1 || $t1 > $_;
      $t2 = $_ if !$t2 || $t2 < $_;
    }
    close T;
    open G, "$graphene get_range drydemag_temp $t1 $t2 |";
    my ($ts,$tn)=(0,0);
    foreach (<G>){
      my ($t, $v) = split /\s+/;
      $ts+=$v; $tn++;
    }
    $temp = 1000*$ts/$tn if $tn>0;
    close G;
  }

  foreach my $f (sort readdir PD){
    next unless $f=~/\.peak$/;
    my ($u,$g,$p) = (0,0,'');
    ($u,$g,$p) = ($1,$2,$3) if $f=~/([0-9\.-]+)_([0-9\.-]+)_(\S+)\.peak/;
    push @sigs, {f=>$f, u=>$u, g=>$g, p=>$p, n=>$n};
    $n++;
  }

  print O "#!/usr/bin/gnuplot\n\n";
  foreach my $s (@sigs){
    print O "f$s->{n}(x) = a$s->{n} * (x - b$s->{n})\n";
    print O "fit f$s->{n}(x) \"$s->{f}\" using (-\$1):(\$2**2) via a$s->{n},b$s->{n}\n";
  }

  print O "\nplot [0:] [0:]\\\n";
  foreach my $s (@sigs){
    print O "\"$s->{f}\" using (-\$1):(\$2**2/$s->{u}) lc $s->{n} title \"$s->{u} $s->{g} $s->{p}\", f$s->{n}(x) lc $s->{n} notitle,\\\n";
  }
  print O "0\n\n";

  foreach my $s (@sigs){
    my $ts = sprintf "\"%5.3f \"", $temp;
    my $ps = sprintf "\" %3s \"", $s->{p};
    print O "print $ts, $s->{u}, $s->{g}, $ps, a$s->{n}, b$s->{n}\n";
  }

  print O "\n\npause -1\n";
  close O;
  `chmod 755 $dir/plot`;
}

