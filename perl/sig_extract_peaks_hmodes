#!/usr/bin/perl
use strict;
use warnings;
use JSON;

use lib qw(/home/sla/PROG/exp_scripts/perl/);
use sigproc;

my $prog = $0;
$prog =~s|^.*/([^/]*$)|$1|;

`sig_mk_fig *.sig`;

############################################################
############################################################
# Extract hmodes
#  - fit modes with f^2 = A (df-df0)
#  - find modes with A > 1000 Hz
#  - split peaks into three groups:
#    df0 < -50,  -50 < df0 < 50, df0 < 50 ???
#  - find the best central peak f0c and the best side peak +/- f0s
#  - refit all peaks with f0c and +/- f0s

my $minA = 1000;
my $df0brd = 50;
my $df0cnt = 20;

############################################################
my $ts=0; # temperature sum
my $n=0;  # temperature counter
my $ptn=0; # point counter
my $dir = "peaks";
`mkdir -p $dir`;
my %ids;  # old excitation

open OUTP, "> $dir/peaks.txt" or die "can't open file: $!\n";
#open OUTL, "> $dir/peaks_l.txt" or die "can't open file: $!\n";

#read new names
my %nnames;
my %npeaks;
if (open NN, "$dir/nnames.txt"){
  foreach (<NN>){
    my ($s,$n,$nn) = split /\s+/; # signal, name, new name;
    $nnames{"$s:$n"} = $nn if ($s && $n && $nn) && $nn ne '-';
  }
}


opendir SD, "." or die "can't open sig folder: .: $!\n";
foreach my $sig (sort readdir SD){
  next unless $sig=~/\.sig$/;
  next if $sig=~/^_/;
  next if $sig=~/^_p\.sig/;
  my $base = $sig; $base=~s/\.sigf?$//;

  my $pars = sigproc::read_sig_info($sig);
  next unless exists $pars->{fig_peaks} && $#{$pars->{fig_peaks}}>-1;

  my $fre  = $pars->{fre};
  my $exc  = $pars->{exc};
  my $grad = $pars->{grad}*1000;
  my $quad = $pars->{quad}*1000;
  my $temp = $pars->{temp}*1000;

  my @peaks = sigproc::process_peaks($pars);
  next unless @peaks;

  my $txt = $base.'.txt';
  open TXT, "> $dir/$txt" or die "can't open file: $txt: $!\n";

  # print all peaks into OUTP
  my $min_df;
  foreach my $p (@peaks){
    next unless $p->{fitres};
    printf OUTP "%24s %2s  %5.2f %6.2f %6.3f   %f %f  %f %f  %f\n", $base, $p->{name},
       $exc, $grad, $temp,  $p->{A}, $p->{dA}, $p->{df0}, $p->{ddf0}, $p->{len};

    for (my $i=0; $i<= $#{$p->{DF}}; $i++ ) {
      print TXT "${$p->{DF}}[$i] ${$p->{F}}[$i]\n";
    }
    $min_df = $p->{df0}-$p->{ddf0} if !defined($min_df) || $min_df > $p->{df0}-$p->{ddf0};
  }
  close TXT;


  # print GP file for all peaks
  my $gpf = $sig; $gpf=~s/\.sigf?$//; $gpf.='.gp';
  open GPF, "> $dir/$gpf" or die "can't open file: $gpf: $!\n";
  print GPF "#!/usr/bin/gnuplot\n\n",
            "set nokey\n";
  print GPF "\nplot [$min_df:][0:] \"$txt\" using 1:(\$2**2) pt 6,\\\n";

  foreach my $p (@peaks){
    next unless $p->{fitres};
    print "peak: $p->{name} $p->{A}\n";
    my $A1 = $p->{A}+$p->{dA};
    my $df1 = $p->{dfc} - $p->{A}/$A1 * ($p->{dfc} - $p->{df0});
    my $A2 = $p->{A}-$p->{dA};
    my $df2 = $p->{dfc} - $p->{A}/$A2 * ($p->{dfc} - $p->{df0});
    print GPF " $A1 * (x-$df1) lc 3,\\\n";
    print GPF " $A2 * (x-$df2) lc 3,\\\n";
  }
  print GPF "0\n",
            "\npause -1\n";
  `chmod 755 $dir/$gpf`;


  ## rescale peaks, sort by new names, save to files
  foreach my $p (@peaks){
    next unless exists $nnames{"$base:$p->{name}"};
    my $nname = $nnames{"$base:$p->{name}"};
    my $txt = "$base:$nname.txt";
    open TXT, "> $dir/$txt" or die "can't open file: $txt: $!\n";
    for (my $i=0; $i<$#{$p->{F}}; $i++) {
      if ($p->{A} > 1000){
        ${$p->{F}}[$i] *= sqrt($exc);
      }
      else {
        ${$p->{F}}[$i] /= sqrt($exc);
      }
      print TXT "${$p->{DF}}[$i] ${$p->{F}}[$i]\n";
    }
    close TXT;
    $p->{base} = $base;
    $p->{nname} = $nname;
    $p->{grad} = $grad;
    $p->{temp} = $temp;
    $p->{exc} = $exc;
    push @{$npeaks{$nname}}, $p;
  }
}

# fit npeaks with individual df, but with same A for each nname
my (%A,%A_e);
my (%sh,%shn); # mean shift for each nname
my %signals;
foreach my $nname (sort keys %npeaks){
  print "nname: $nname\n";
  my ($res, $err);
  ($res, $A{$nname}, $A_e{$nname}, $err) = sigproc::fit_peaks($npeaks{$nname});
  my ($ss,$sn)=(0,0);
  foreach my $p (@{$npeaks{$nname}}){
    push @{$signals{$p->{base}}}, $p;
    $ss += $p->{df0};
    $sn++;
  }
  $sh{$nname} = $ss;
  $shn{$nname} = $sn;
  print "SH($nname) = $sh{$nname}/$shn{$nname}\n";
}

#shift signals
my %sig_sh;
foreach my $base (sort keys %signals){
  my $peaks = $signals{$base};
  my ($ss,$sn)=(0,0);
  # mean difference with mean peak position excluding this signal
  foreach my $p (@{$signals{$base}}){
    # TODO: weight!
    my $n = $shn{$p->{nname}};
    if ($n>0){
      $ss += ($p->{df0} - $sh{$p->{nname}}/$n)*($n-1);
      $sn += ($n-1);
    }
  }
  $sig_sh{$base} = $sn ? $ss/$sn : 0;
  print "SH($base) = $sig_sh{$base}\n";
}

open GPF, "> $dir/npeaks.gp" or die "can't open file: $!\n";
print GPF "#!/usr/bin/gnuplot\n\n";
print GPF "\nplot [-100:][0:]\\\n";

$n=0;
my %fpeaks; # for combined fit
foreach my $nname (sort keys %npeaks){
  $n++;
  my ($res, $A, $dA, $err) = sigproc::fit_peaks($npeaks{$nname});
  my $pn=0;

  foreach my $p (@{$npeaks{$nname}}){
    my $ssh = $sig_sh{$p->{base}};
    my $t = ($pn++ == 0)? "title \"$nname\"": "notitle";
    print GPF " \"$p->{base}:$nname.txt\" using (\$1-$ssh):(\$2**2) lc $n $t,\\\n";
    print GPF " $A{$nname}*(x-$p->{df0}+$ssh) notitle lc $n,\\\n";

    $_-=$ssh foreach (@{$p->{DF}});

    if (!exists $fpeaks{$nname}) {
      $fpeaks{$nname} = $p;
    }
    else {
      push @{$fpeaks{$nname}->{T}},  @{$p->{T}};
      push @{$fpeaks{$nname}->{DF}}, @{$p->{DF}};
      push @{$fpeaks{$nname}->{F}},  @{$p->{F}};
    }
  }
}
print GPF "0\n",
          "\npause -1\n";
`chmod 755 $dir/npeaks.gp`;

# do combined fits
my (%sides, %sides_n);
foreach my $nname (keys %fpeaks){
  my $p = $fpeaks{$nname};
  sigproc::fit_peak($p);

  # make "side" arrays, C0+C1, L0+L1 etc.
  $nname=~s/\d+$//;
  $sides{$nname}+=$p->{df0};
  $sides_n{$nname}++;
}

# refit with fised df0
foreach my $nname (keys %fpeaks){
  my $p = $fpeaks{$nname};
  $nname=~s/\d+$//;
  my $df0 = $sides{$nname}/$sides_n{$nname};
  sigproc::fit_peak_fixdf($p, $df0);
}


open GPF, "> $dir/npeaks_a.gp" or die "can't open file: $!\n";
print GPF "#!/usr/bin/gnuplot\n\n";
print GPF "\nplot [-100:][0:]\\\n";

$n=0;
foreach my $base (sort keys %signals){
  my $np=0;
  $n++;
  foreach my $p (@{$signals{$base}}){
    my $t = ($np++ == 0)? "title \"$base\"": "notitle";
    my $ssh = $sig_sh{$base};
    print GPF " \"$base:$p->{nname}.txt\" using (\$1-$ssh):(\$2**2) lc $n pt $n $t,\\\n";
  }
}

foreach my $nname (sort keys %fpeaks){
  my $p = $fpeaks{$nname};
  print GPF " $p->{Af}*(x-$p->{df0f}) notitle lc 0,\\\n";
  print "$nname $p->{Af} $p->{dA} $p->{df0f}  $p->{temp} $p->{grad} $p->{exc}\n";
}

print GPF "0 notitle\n",
          "\npause -1\n";
`chmod 755 $dir/npeaks_a.gp`;
