#!/usr/bin/perl
use strict;
use warnings;
use JSON;

my $prog = $0;
$prog =~s|^.*/([^/]*$)|$1|;

############################################################
############################################################
# Extract peak information from inf-files and print it as a table
#

############################################################
my $sigs;
my $types;

# first pass:
#  - read signal information
#  - convert time to freq.shift
#  - scale x2, x3 peaks, remove numbers from names
#  - for each peak type (name + exc + grad)
#    find min and max peak length in frequency
#    (we assume that longer peaks are better for fitting)
#  - fit peaks with f^2 = a(df-df0).

foreach my $sig (@ARGV) {

  # read inf file for the signal
  my $inf = $sig; $inf=~s/\.sigf?$//; $inf.='.inf';
  `sig_get_info $sig` unless -f $inf;
  open INF, "$inf" or die "can't open file: $inf: $!\n";
  $sigs->{$sig}->{pars} = decode_json(join "\n", (<INF>));
  close INF;

  my $pars = $sigs->{$sig}->{pars};
  next unless exists $pars->{fig_peaks};

  foreach my $p (@{$pars->{fig_peaks}}){
    $p->{name} = $p->{name} || "";

    # skip larmor peak
    $p->{name} = "larm" if $p->{name} eq "l";
    next if $p->{name} eq "larm";

    # convert time to freq.shift, scale x2, x3 etc peaks:
    for (my $i=0; $i < $#{$p->{T}}; $i++){
      ${$p->{DF}}[$i] = ${$p->{T}}[$i]*$pars->{dfdt} - ($pars->{larm_df} || 0);
      ${$p->{F}}[$i]/=$1 if $p->{name}=~/(\d)$/;
    }
    # remove numbers from names:
    $p->{name}=~s/\d$//;

    next if $#{$p->{DF}}<2;

    $p->{type} = sprintf("%s_%.2f_%.0f", $p->{name}, $pars->{exc}, $pars->{grad}*1000);
    $p->{flen} = abs(${$p->{DF}}[$#{$p->{DF}}]-${$p->{DF}}[0]);

    $types->{$p->{type}}->{min_len} = $p->{flen}
       if !$types->{$p->{type}}->{min_len} || $types->{$p->{type}}->{min_len} > $p->{flen};

    $types->{$p->{type}}->{max_len} = $p->{flen}
       if !$types->{$p->{type}}->{max_len} || $types->{$p->{type}}->{max_len} < $p->{flen};

    # fit peaks with y^2 = a*(df-df0)
    my ($sx,$sxx,$sy,$sxy,$sn) = (0,0,0,0,0);
    for (my $i=0; $i<= $#{$p->{DF}}; $i++ ) {
      my $x = ${$p->{DF}}[$i];
      my $y = ${$p->{F}}[$i]*${$p->{F}}[$i];
      $sx+=$x; $sxx+=$x*$x; $sy+=$y; $sxy+=$x*$y; $sn++;
    }
    my $B = ($sxx*$sy-$sx*$sxy)/($sxx*$sn-$sx*$sx);
    my $A = ($sy-$B*$sn)/$sx;
    my $df0 = -$B/$A;

    $p->{fit_a} = $A;
    $p->{fit_df0} = $df0;

  }
}


# For each type calculate median length,
# reset counters for DF0 calculation
foreach (keys %{$types}){
  $types->{$_}->{mid_len} = ($types->{$_}->{max_len} - $types->{$_}->{min_len})/2;
  $types->{$_}->{DF0} = 0;  # will be used later 
  $types->{$_}->{DF0N} = 0; # will be used later 
}


# second pass:
#  - for good peaks (with length > mid_len),
#    save df0 int $types->{type}->{DF0} array
foreach (sort keys %{$sigs}) {
  my $pars = $sigs->{$_}->{pars};
  next unless exists $pars->{fig_peaks};

  foreach my $p (@{$pars->{fig_peaks}}){
    $p->{good} =$p->{fit_df0} && $p->{flen} >= $types->{$p->{type}}->{mid_len};
    next unless $p->{good};
    $p->{good} = 1;
    $types->{$p->{type}}->{DF0} += $p->{fit_df0};
    $types->{$p->{type}}->{DF0N}++;
  }
}

print STDERR "# peak types:\n";
printf STDERR "# %15s%6s%6s%3s\n", "type", "mlen", "df0", "N";
foreach (keys %{$types}){
  next if $types->{$_}->{DF0N} == 0;
  $types->{$_}->{DF0} /= $types->{$_}->{DF0N};
  printf STDERR "%-15s: %6.1f %6.1f %3d\n", $_,
     $types->{$_}->{mid_len}, $types->{$_}->{DF0}, $types->{$_}->{DF0N};
}


# print signal information sorted by type
my $f1 = 'raw_fit.txt';
foreach my $type (keys %{$types}){

  my $f1 = "fit_$type.txt";
  open S1, "> $f1" or die "can't open file: $f1: $!\n";


  foreach my $sig (sort keys %{$sigs}) {
    my $pars = $sigs->{$sig}->{pars};
    foreach my $peak (@{$pars->{fig_peaks}}) {
      next unless $peak->{type} && $peak->{type} eq $type;
      # strange peak: it was long and used for DF0,
      # but it's own df0 if too far from average
      $peak->{strange} =
        $peak->{good} && abs($peak->{fit_df0}-$types->{$type}->{DF0})>50;

      # fit peaks with y^2 = a*(df-df0) with fixed df0
       my ($ss,$sn) = (0,0);
      for (my $i=0; $i<= $#{$peak->{DF}}; $i++ ) {
        $ss += (${$peak->{F}}[$i]*${$peak->{F}}[$i])/
               (${$peak->{DF}}[$i] - $types->{$type}->{DF0});
        $sn++;
      }
      $peak->{fit1_a} = $ss/$sn;
      $peak->{fit1_df0} = $types->{$type}->{DF0};

      printf S1 "%20s %8.2f   %5.3f %6.2f %6.2f %5.2f   %8.2f %8.2f   %8.2f %8.2f   %1d %1d\n", $sig,
         $pars->{temp}*1000,
         $pars->{grad}*1000,
         $pars->{quad}*1000,
         $pars->{exc},
         ($peak->{flen} || 0),
         ($peak->{fit_a} || 0),
         ($peak->{fit_df0} || 0),
         ($peak->{fit1_a} || 0),
         ($peak->{fit1_df0} || 0),
         ($peak->{good} || 0),
         ($peak->{strange} || 0);
    }
  }
  close S1;
}



__END__
next;

  my $fre  = $pars->{fre};
  my $exc  = $pars->{exc};
  my $grad = $pars->{grad}*1000;
  my $quad = $pars->{quad}*1000;
  my $temp = $pars->{temp}*1000;
  my $dfdt = $pars->{dfdt};
  my $df   = $pars->{larm_df} || 0;

  my $nu_b = -4.0828e+04*$temp**3 + 2.8363e+04*$temp**2 + 3.5067e+02*$temp + 2.8825e+05;
  my $nu_b0 = -4.0828e+04*0.5**3 + 2.8363e+04*0.5**2 + 3.5067e+02*0.5 + 2.8825e+05;

  foreach my $p (@{$pars->{fig_peaks}}){
    my $name = $p->{name} || "";
    next if $#{$p->{DF}}<2;
    next if abs(${$p->{DF}}[$#{$p->{DF}}]-${$p->{DF}}[0]) < 100;

    my ($sx,$sxx,$sy,$sxy,$sn) = (0,0,0,0,0);
    for (my $i=0; $i<= $#{$p->{DF}}; $i++ ) {
      my $x = ${$p->{DF}}[$i];
      my $y = ${$p->{F}}[$i]*${$p->{F}}[$i];
      $sx+=$x; $sxx+=$x*$x; $sy+=$y; $sxy+=$x*$y; $sn++;
    }
    my $B = ($sxx*$sy-$sx*$sxy)/($sxx*$sn-$sx*$sx);
    my $A = ($sy-$B*$sn)/$sx;
    my $df0 = -$B/$A;

  }


  foreach my $p (@{$pars->{fig_peaks}}){
    my $name = $p->{name} || "";
    # print raw peak data
    if ($prog eq 'sig_extract_peaks') {
      for (my $i=0; $i<$#{$p->{T}}; $i++){
        printf "%e %e %e %e\n", ${$p->{DF}}[$i][$i], ${$p->{F}}[$i][$i], ${$p->{A}}[$i], ${$p->{Q}}[$i];
      }
    }

    #fit with f^2 = A (df - df0)
    elsif ($prog eq 'sig_extract_peaks_fit') {
      next if $#{$p->{DF}}<2;
#      next if abs(${$p->{DF}}[$#{$p->{DF}}]-${$p->{DF}}[0]) < 100;

      my ($sx,$sxx,$sy,$sxy,$sn) = (0,0,0,0,0);
      for (my $i=0; $i<= $#{$p->{DF}}; $i++ ) {
        my $x = ${$p->{DF}}[$i];
        my $y = ${$p->{F}}[$i]*${$p->{F}}[$i];
        $sx+=$x; $sxx+=$x*$x; $sy+=$y; $sxy+=$x*$y; $sn++;
      }
      my $B = ($sxx*$sy-$sx*$sxy)/($sxx*$sn-$sx*$sx);
      my $A = ($sy-$B*$sn)/$sx;
      my $df0 = -$B/$A;
      printf "%10s %5s  %5.3f %6.2f %6.2f %5.2f  %f   %e %e",
        $sig, ($p->{name} || "-"),
        $temp, $grad, $quad, $exc,
        $df,
        -$A, $df0;
    }


    #fit with f^2 = A (df - df0) with df0 = (grad+8.2)*4.587
    elsif ($prog eq 'sig_extract_peaks_fit1') {

      my $DF0 = 0;
      $DF0 = ($grad+8)/(-10+8)*(-162+262) - 262 if $name =~ /^ls\d/;
      $DF0 = ($grad+8)/(-10+8)*(-192+100) - 100 if $name =~ /^l\d/;
      my ($ss,$sn) = (0,0);
      for (my $i=0; $i<= $#{$p->{DF}}; $i++ ) {
        $ss+= ${$p->{F}}[$i]*${$p->{F}}[$i] / (${$p->{DF}}[$i]-$DF0);
        $sn++;
      }
      next if $sn==0;
      my $A = $ss/$sn;

      printf "%10s %5s  %5.3f %6.2f %6.2f %5.2f  %f   %e %e",
        $sig, ($p->{name} || "-"),
        $temp, $grad, $quad, $exc,
        $df,
        -$A, $DF0;
    }

    ###
    print "\n";
  }

}






