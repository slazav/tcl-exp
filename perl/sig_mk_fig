#!/usr/bin/perl
use strict;
use warnings;
use JSON;

############################################################
############################################################
# Update FIG file and INF file
#

############################################################
## path to sig_filter program
my $sig_filter = '~/PROG/pico_osc/sig_filter/sig_filter';
#my $sig_filter = 'sig_filter';


############################################################
## Process signals
foreach my $sig (@ARGV) {

  my $inf = $sig; $inf=~s/\.sigf?$//; $inf.='.inf';
  `sig_get_info $sig` unless -f $inf;
  open INF, "$inf" or die "can't open file: $inf: $!\n";
  my $pars = decode_json(join "\n", (<INF>));
  close INF;

  my $fig = $sig; $fig=~s/\.sigf?$//; $fig.='.fig';
  my $png = $sig; $png=~s/\.sigf?$//; $png.='.png';
  print "updating FIG-file: $fig\n";


  delete $pars->{fig_t0};
  delete $pars->{fig_lt};
  delete $pars->{fig_lf};
  delete $pars->{larm_df};
  delete $pars->{fig_marks};
  delete $pars->{fig_peaks};

  ############################################################
  ## read data from fig if it exists
  if (-f $fig) {
    open FIG, $fig or die "Can't open file: $fig: $!";
    my @time2fig = [0,1];
    my @freq2fig = [0,1];

    my $state=-1;
    my $color=0;
    my @crd = ();
    foreach my $l (<FIG>){
      # extract conversion parameters:
      @time2fig = ($1,$2) if $l=~/^# TIME2FIG:\s+(\S+)\s+(\S+)/;
      @freq2fig = ($1,$2) if $l=~/^# FREQ2FIG:\s+(\S+)\s+(\S+)/;

      # switch to a scanning state:
      $state=0 if $l=~/^1200 2/;

      # extract all lines with [A-Z]\S+ comments:
      if ($state == 1 && $l=~/^\s+\d+/) {
        $l=~s/^\s*(.*?)\s*$/$1/;
        my @c = split /\s+/, $l;
        push(@crd, @c);
      }
      # read lines with depth=50 and different colors
      if ($l=~/^\d/) {
        if ($state==0 && $l=~/^2 1 0 1 (\d+) 7 50/){
          push @{$pars->{fig_marks}}, {color=>$color, crd=>[@crd]} if $#crd>=0;
          @crd = ();
          $state = 1;
          $color = $1;
        } else {
          $state = 0;
        }
      }
    }
    # save old object
    push @{$pars->{fig_marks}}, {color=>$color, crd=>[@crd]} if $#crd>=0;
    close FIG;


    foreach my $d (@{$pars->{fig_marks}}){

      my $crd = \@{$d->{crd}};
      #convert all lines to time-freq coordinates
      for (my $i=0; $i<= $#{$crd}-1; $i+=2 ) {
        ${$crd}[$i]   = (${$crd}[$i]-$time2fig[0])/$time2fig[1];
        ${$crd}[$i+1] = (${$crd}[$i+1]-$freq2fig[0])/$freq2fig[1];
      }


      # color=2 : t0 line
      if ($d->{color} == 2 && $#{$crd}>=3)  {
        $pars->{fig_t0}=(${$crd}[0]+${$crd}[2])/2;
        next;
      }

      # color=1 : Larmor point
      if ($d->{color} == 1 && $#{$crd}>=1)  {
        $pars->{fig_lt}=${$crd}[0];
        $pars->{fig_lf}=${$crd}[1];

        # if CW data exists calculate frequency shift
        my $ncw = $#{$pars->{nmr_i}}+1;
        if ($ncw>0) {
          my $t0=${$crd}[0];
          my $f0=${$crd}[1];
          for (my $i=1; $i<$ncw; $i++){
            # frequency shift from t=0
            my $t1 = ${$pars->{nmr_t}}[$i-1];
            my $t2 = ${$pars->{nmr_t}}[$i];
            if ($t1 < $t0 && $t0 <= $t2){
              my $f1 = (${$pars->{nmr_i}}[$i-1]-${$pars->{nmr_i}}[0])*$pars->{dfdi};
              my $f2 = (${$pars->{nmr_i}}[$i]-${$pars->{nmr_i}}[0])*$pars->{dfdi};
              $pars->{larm_df} = $f1 + ($f2-$f1)/($t2-$t1)*($t0-$t1) - $f0;
              last;
            }
          }
        }
        next;
      }

      # color=0 : Side bands
      if ($d->{color} == 0 && $#{$crd}>=2)  {


        my (@T,@F,@A,@Q);
        for (my $i=0; $i<=$#{$crd}-1; $i+=2){
          push @T, ${$crd}[$i];
          push @F, ${$crd}[$i+1] + $pars->{fre_fft};
        }

        my $cmd= $sig_filter .
         " -f sfft_peak \"$sig\"" .
         " -T " . join(",", @T) .
         " -F " . join(",", @F) .
         ($pars->{peak_win} ? " -w $pars->{peak_win}":"") .
         ($pars->{peak_stp} ? " -s $pars->{peak_stp}":"");
        @T=(); @F=(); @A=(); @Q=();
        foreach  (split "\n", `$cmd`){
          my ($t, $f, $a, $a0) = split /\s+/;
          next unless ($t && $f && $a && $a0);
          next unless $a/$a0 > ($pars->{peak_thr} || 1.5);
          push @T, $t;
          push @F, $f - $pars->{fre_fft};
          push @A, $a;
          push @Q, $a/$a0; # peak quality
        }
        push @{$pars->{fig_peaks}}, {T=>[@T], F=>[@F], A=>[@A], Q=>[@Q]};
      }
    }
  }

  ############################################################
  ## Create FIG

  if ( -f $fig ) { rename $fig, "$fig.bak";}
  open FIG, "> $fig" or die "Can't open fig file: $!\n";

  # image
  my $X1=100;   # x margin
  my $Y1=100;   # y margin
  my $X2=9000;
  my $Y2=5000;
  my $tl = 50;  # tick length
  my $dt = 5;   # time step, seconds
  my $df = 500; # freq step, hertz
  my $dfh = 100; # horizontal freq step, hertz

  my $timeS = $pars->{timeS};      # signal time span
  my $freqS = $pars->{freq_span}; # signal frequency span
  my $freq0 = $pars->{fre_fft};
  my @freq2fig = ($Y1+($Y2-$Y1)/2, -($Y2-$Y1)/$freqS);
  my @time2fig = ($X1, ($X2-$X1)/$timeS);
  my $larm_df=$pars->{larm_df} || 0;

  # header
  print FIG "#FIG 3.2\n",
            "Portrait\nCenter\nMetric\nA4\n100.00\nSingle\n-2\n";
  print FIG "# TIME2FIG: $time2fig[0] $time2fig[1]\n";
  print FIG "# FREQ2FIG: $freq2fig[0] $freq2fig[1]\n";
  print FIG "1200 2\n";

  # image frame
  print FIG "2 2 0 1 0 7 150 -1 -1 0.000 0 0 -1 0 0 5\n",
            "\t$X1 $Y1  $X2 $Y1  $X2 $Y2  $X1 $Y2 $X1 $Y1\n";
  if ($pars->{fre_sign}>=0) { # frequency is not flipped
    print FIG "2 5 0 1 0 -1 500 -1 -1 0.000 0 0 -1 0 0 5\n",
              "\t0 $png\n",
              "\t$X1 $Y1  $X2 $Y1  $X2 $Y2  $X1 $Y2 $X1 $Y1\n";
  }
  else { # frequency is flipped because of small sampling rate
    print FIG "2 5 0 1 0 -1 500 -1 -1 0.000 0 0 -1 0 0 5\n",
              "\t1 $png\n",
              "\t$X1 $Y2  $X2 $Y2  $X2 $Y1  $X1 $Y1 $X1 $Y2\n";
  }

  # time ticks
  my ($xt, $yt);
  my ($y1,$y2,$y3,$y4) = ($Y1, $Y1+$tl, $Y2-$tl, $Y2);
  $yt = $y4+200; # text coord
  for (my $t=0; $t<=$timeS; $t+=$dt) {
    my $x = int($time2fig[0] + $time2fig[1]*$t);
    print FIG "2 1 0 1 0 7 150 -1 -1 0.000 0 0 -1 0 0 2\n\t$x $y3 $x $y4\n",
              "4 1 0 50 -1 18 10 0.0000 4 135 375 $x $yt $t\\001\n";
  }
  $yt = $y1-50; # text coord
  if ($timeS*$pars->{dfdt}) {
    for (my $f=0; $f <= -$timeS*$pars->{dfdt}; $f+=$dfh) {
      my $t = -$f/$pars->{dfdt};
      my $x = int($time2fig[0] + $time2fig[1]*$t);
      print FIG "2 1 0 1 0 7 150 -1 -1 0.000 0 0 -1 0 0 2\n\t$x $y1 $x $y2\n",
                "4 1 0 140 -1 18 10 0.0000 4 135 375 $x $yt $f\\001\n";
    }
  }



  # frequency ticks
  my ($x1,$x2,$x3,$x4) = ($X1, $X1+$tl, $X2-$tl, $X2);
  $xt = $x1-20; # text coord
  for (my $f=0; $f <= $freqS/2; $f+=$df) {
    foreach my $s (-1, 1) {
      my $ff=$s*$f;
      my $y = int($freq2fig[0] + $freq2fig[1]*$ff);
      print FIG "2 1 0 1 0 7 150 -1 -1 0.000 0 0 -1 0 0 2\n\t$x1 $y $x2 $y\n",
                "2 1 0 1 0 7 150 -1 -1 0.000 0 0 -1 0 0 2\n\t$x3 $y $x4 $y\n",
                "4 2 0 140 -1 18 10 0.0000 4 135 375 $xt $y $ff\\001\n";
    }
  }

  # frequency label
  $yt = int($freq2fig[0]);
  $xt = int($time2fig[0]) + $tl;
  print FIG "4 0 0 100 -1 18 10 0.0000 4 135 375 $xt $yt $pars->{fre} Hz\\001\n";

  # temperature label
  $xt = $X1 + $tl;
  $yt = $Y2 - $tl;
  my $T = sprintf "%.3f", $pars->{temp}*1000;
  print FIG "4 0 0 100 -1 18 10 0.0000 4 135 375 $xt $yt T = $T mK\\001\n";

  # amplitude plot:
  my $YP1=$Y2+300;
  my $YP2=$YP1+($Y2-$Y1);
  my $YPC=($YP2+$YP1)/2;
  print FIG "2 2 0 1 0 7 150 -1 -1 0.000 0 0 -1 0 0 5\n",
            "\t$X1 $YP1  $X2 $YP1  $X2 $YP2  $X1 $YP2 $X1 $YP1\n";
  print FIG "2 1 0 1 0 7 150 -1 -1 0.000 0 0 -1 0 0 2\n",
            "\t$X1 $YPC  $X2 $YPC\n";

  # SFFT amplitude plot
  if ($#{$pars->{sfft_t}} > -1) {
    my @cw2fig   = ($YPC, -($YP2-$YP1)/$pars->{sfft_max}/2.05);
    my $ncw=$#{$pars->{sfft_t}}+1;
    if ($pars->{ch}>1) {
      print FIG "2 1 0 3 25 7 70 -1 -1 0.000 1 1 -1 0 0 $ncw\n";
      for (my $i=0; $i<$ncw; $i++){
        my $x = int($time2fig[0] + $time2fig[1]*${$pars->{sfft_t}}[$i]);
        my $y = int($cw2fig[0] + $cw2fig[1]*${$pars->{sfft_x}}[$i]);
        print FIG "\t$x $y\n";
      }
      print FIG "2 1 0 3 23 7 70 -1 -1 0.000 1 1 -1 0 0 $ncw\n";
      for (my $i=0; $i<$ncw; $i++){
        my $x = int($time2fig[0] + $time2fig[1]*${$pars->{sfft_t}}[$i]);
        my $y = int($cw2fig[0] + $cw2fig[1]*${$pars->{sfft_y}}[$i]);
        print FIG "\t$x $y\n";
      }
    }
    print FIG "2 1 0 3 15 7 70 -1 -1 0.000 1 1 -1 0 0 $ncw\n";
    for (my $i=0; $i<$ncw; $i++){
      my $x = int($time2fig[0] + $time2fig[1]*${$pars->{sfft_t}}[$i]);
      my $y = int($cw2fig[0] + $cw2fig[1]*${$pars->{sfft_a}}[$i]);
      print FIG "\t$x $y\n";
    }
  }

  if ($#{$pars->{nmr_i}} > -1) {
    # CW NMR amplitude plot
    my @cw2fig = ($YPC, -($YP2-$YP1)/$pars->{nmr_max}/2.05);
    my $ncw=$#{$pars->{nmr_t}}+1;
    print FIG "2 1 0 3 25 7 60 -1 -1 0.000 1 1 -1 0 0 $ncw\n";
    for (my $i=0; $i<$ncw; $i++){
      my $x = int($time2fig[0] + $time2fig[1]*${$pars->{nmr_t}}[$i]);
      my $y = int($cw2fig[0] + $cw2fig[1]*${$pars->{nmr_x}}[$i]);
      print FIG "\t$x $y\n";
    }
    print FIG "2 1 0 3 23 7 60 -1 -1 0.000 1 1 -1 0 0 $ncw\n";
    for (my $i=0; $i<$ncw; $i++){
      my $x = int($time2fig[0] + $time2fig[1]*${$pars->{nmr_t}}[$i]);
      my $y = int($cw2fig[0] + $cw2fig[1]*${$pars->{nmr_y}}[$i]);
      print FIG "\t$x $y\n";
    }
    print FIG "2 1 0 3 15 7 60 -1 -1 0.000 1 1 -1 0 0 $ncw\n";
    for (my $i=0; $i<$ncw; $i++){
      my $x = int($time2fig[0] + $time2fig[1]*${$pars->{nmr_t}}[$i]);
      my $y = int($cw2fig[0] + $cw2fig[1]*${$pars->{nmr_a}}[$i]);
      print FIG "\t$x $y\n";
    }
    # larmor freq
    # find frequency shift
    print FIG "2 1 0 1 12 7 60 -1 -1 0.000 0 0 -1 0 0 $ncw\n";
    for (my $i=0; $i<$ncw; $i++){
      my $ff = (${$pars->{nmr_i}}[$i]-${$pars->{nmr_i}}[0])*$pars->{dfdi} - $larm_df;
      my $x = int($time2fig[0] + $time2fig[1]*${$pars->{nmr_t}}[$i]);
      my $y = int($freq2fig[0] + $freq2fig[1]*$ff);
      print FIG "\t$x $y\n";
    }

    # Fomin's mode
#    for (my $s = -1; $s<=1; $s+=2) {
#      print FIG "2 1 0 1 15 7 60 -1 -1 0.000 0 0 -1 0 0 $ncw\n";
#      for (my $i=0; $i<$ncw; $i++){
#        my $df = (${$pars->{nmr_i}}[0]-${$pars->{nmr_i}}[$i])*$pars->{dfdi};
#        my $h = 0.001;
#        my $d = $df/$pars->{fre};
#        my $flegg2 = 0;
#
#        my $u = $d-$s*$h/sqrt(15);
#        my $f3 = $u<0? 0:sqrt( $u * (3.0/8.0+$flegg2)/(1.0+$flegg2) );
#        $f3 *= $pars->{fre};
#
#        my $x = int($time2fig[0] + $time2fig[1]*${$pars->{nmr_t}}[$i]);
#        my $y = int($freq2fig[0] + $freq2fig[1]*$f3);
#        print FIG "\t$x $y\n";
#      }
#    }

#    for (my $s = -1; $s<=1; $s+=2) {
#      print FIG "2 1 0 1 15 7 60 -1 -1 0.000 0 0 -1 0 0 $ncw\n";
#      for (my $i=0; $i<$ncw; $i++){
#        my $df = (${$pars->{nmr_i}}[0]-${$pars->{nmr_i}}[$i])*$pars->{dfdi} + $larm_df - 150;
#
#        my $k = ($s<0)? 220:320;
#        my $f3 = ($df<0)? 0:sqrt($df*$k);
#
#        my $x = int($time2fig[0] + $time2fig[1]*${$pars->{nmr_t}}[$i]);
#        my $y = int($freq2fig[0] + $freq2fig[1]*$f3);
#        print FIG "\t$x $y\n";
#      }
#    }

  }


  # restore fig marks
  foreach my $L (@{$pars->{fig_marks}}){
    my $n = ($#{$L->{crd}}+1)/2;
    print FIG "2 1 0 1 $L->{color} 7 50 -1 -1 0.000 0 0 -1 0 0 $n";
    for (my $i=0; $i <= $#{$L->{crd}}-1; $i+=2){

      my $x = int($time2fig[0] + $time2fig[1]*${$L->{crd}}[$i]);
      my $y = int($freq2fig[0] + $freq2fig[1]*${$L->{crd}}[$i+1]);

      print FIG "\n\t" if $i%8==0;
      print FIG " $x $y";
    }
    print FIG "\n";
  }

  # draw peaks
  foreach my $L (@{$pars->{fig_peaks}}){
    my $n = $#{$L->{T}};
    for (my $i=0; $i <= $n; $i++){
      my $x = int($time2fig[0] + $time2fig[1]*${$L->{T}}[$i]);
      my $y = int($freq2fig[0] + $freq2fig[1]*${$L->{F}}[$i]);
      print FIG "# ${$L->{Q}}[$i]\n";
      print FIG "2 1 0 2 3 7 55 -1 -1 0.000 1 1 -1 0 0 1\n".
        "\t$x $y\n";
    }
  }


  # write png file
  my $figpng = "f_$sig"; $figpng=~s/\.sigf?$/.png/;
  `fig2dev -Lpng $fig $figpng`;


  ############################################################
  ## Save parameters
  open INF, "> $inf" or die "can't open file: $inf: $!\n";
  print INF JSON->new->pretty->canonical->utf8->encode($pars);
  close INF;

}

__END__





