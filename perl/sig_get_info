#!/usr/bin/perl
use strict;
use warnings;
use JSON;

############################################################
############################################################
# Collect information about HPD signal
#
#  Parameters read from conf.file, used for processing:
#
#    freq_span -- frequency span
#    nmr_ph    -- phase shift of CW NMR
#                 TODO: detect automatically?
#    sfft_win   -- fft window size
#    png_win    -- fft window size
#    tmin, tmax -- time span
#    amin, amax -- amplitude
#    W, H       -- png image size
#    peak_win
#    peak_thr
#    peak_stp
#
#  Parameters from the signal header:
#    t0abs - absolute time of trigger position
#    t1abs - absolute time of the first sample
#    t2abs - absolute time of the last sample
#    dt    - time step
#    t0    - time of first sample, counted from trigger
#    n     - number of points
#    ch    - number of channels
#    timeS - signal length in seconds
#
#  From database:
#    fre -- generator frequency
#    exc -- excitation amplitude
#    com -- compensation amplitude
#    exc_ph -- excitation phase
#    com_ph -- compensation phase
#    temp   -- temperature (noise thermometer)
#    fre_fft -- fft frequency
#    fmin, fmax -- frequency limits (in fft)
#
#    fre_fft  -- frequency after fft transformation
#    fre_sign -- is the  frequncy swapped?
#
#    nmr_t, nmr_i, nmr_x, nmr_y, nmr_a -- CW NMR data
#    nmr_max -- CW NMR max amplitude
#
#    didt dfdi dtdf -- factors

############################################################
## path to sig_filter program
my $sig_filter = '~/PROG/pico_osc/sig_filter/sig_filter';
#my $sig_filter = 'sig_filter';

## path to graphene program:
my $graphene = 'graphene -d /home/exports/DB';
#my $graphene = 'graphene -d /var/lib/graphene';

############################################################
# get CW NMR function
sub get_nmr {
  my $t1 = shift;
  my $t2 = shift;
  my $x0 = (shift || 0);
  my $y0 = (shift || 0);
  my $ph = (shift || 0) * 3.1415926/180;

  # get NMR data from the database
  open DAT, "$graphene -r get_range drydemag_sweep_main $t1 $t2 |"
    or die "Can't run graphene program: $!\n";

  my (@T, @I, @X, @Y, @A);
  foreach (<DAT>){
    my @arr = split '\s+';
    push @T, $arr[0];
    push @I, $arr[2];
    push @X, $arr[4];
    push @Y, $arr[5];
  }
  close DAT;

  # subtract baseline, calculate maximum
  my $max =0;
  $x0 = $X[$#X] if $x0 eq 'auto';
  $y0 = $Y[$#Y] if $y0 eq 'auto';
  for (my $i=0; $i<=$#X; $i++){
    $X[$i] -= $x0;
    $Y[$i] -= $y0;
    my $a = sqrt($X[$i]**2 + $Y[$i]**2);
    push @A, $a;
    $max = $a if $max < $a;
  }

  # change phase:
  if ($ph!=0) {
    my $cph = cos($ph);
    my $sph = sin($ph);
    for (my $i=0; $i<=$#X; $i++){
      my $x =  $X[$i]*$cph + $Y[$i]*$sph;
      my $y = -$X[$i]*$sph + $Y[$i]*$cph;
      $X[$i] = $x;
      $Y[$i] = $y;
    }
  }
  return (\@T, \@I, \@X, \@Y, \@A, $max);
}

############################################################
## automatic fix of phase
sub fix_phase {
  my $X=shift;
  my $Y=shift;
  my $A=shift;

  # first and last point
  my ($x1,$x2,$y1,$y2) = (${$X}[0],${$X}[$#{$X}],${$Y}[0],${$Y}[$#{$Y}]);

  my $x0 = ($x1+$x2)/2;
  my $y0 = ($y1+$y2)/2;
  my $ph=atan2($y2-$y1,$x2-$x1);

  my $cp = cos($ph);
  my $sp = sin($ph);
  for (my $i=0; $i<=$#{$X}; $i++){
    my $x = ${$X}[$i] - $x0;
    my $y = ${$Y}[$i] - $y0;
    ${$X}[$i] = $x*$cp + $y*$sp;
    ${$Y}[$i] =-$x*$sp + $y*$cp;
    ${$A}[$i] = sqrt($x*$x+$y*$y);
  }
  return ($x0,$y0,$ph);
}


############################################################
## Read a configuration from file, set default values.
my $cfg_file = "Signal.cfg";
my %cfg;


print "Setting default parameters...\n";
$cfg{freq_span} = 3000;
$cfg{nmr_ph} = 0;
$cfg{sfft_win} = 20000;
$cfg{png_win}  = 50000;
$cfg{peak_win}  = 50000;
$cfg{peak_thr}  = 4.0;
$cfg{peak_stp}  = 10000;
$cfg{W}  = 1600;
$cfg{H}  = 1200;

if (open CFG, $cfg_file) {
  print "Reading parameters from $cfg_file:\n";
  foreach (<CFG>){
    chomp;
    s/#.*//;
    next if /^ *$/;
    $cfg{$1}=$2 if /([a-zA-Z0-9_]+): *([^ ]+)/;
  }
  close CFG;
}
print "  $_: $cfg{$_}\n" foreach (sort keys %cfg);


############################################################
## Process signals
foreach my $sig (@ARGV) {
  my %pars=%cfg;
  print "Collecting information: $sig\n";


  ############################################################
  ## Read signal header

  my ($t0abs, $t0, $dt, $n);
  open SIG, $sig or die "can't open sig file: $sig: $!\n";
  $pars{ch} = 0;
  while (my $l = <SIG>){
    chomp $l;
    last if $l=~/^\*$/;
    $pars{t0abs}  = $1 if $l=~/^\s*t0abs: *([0-9\.eE+-]+)/;
    $pars{dt}     = $1 if $l=~/^\s*dt: *([0-9\.eE+-]+)/;
    $pars{t0}     = $1 if $l=~/^\s*t0: *([0-9\.eE+-]+)/;
    $pars{n}      = $1 if $l=~/^\s*points: *([0-9\.eE+-]+)/;
    $pars{ch}++ if $l=~/^\s*chan:/;
  }

  $pars{timeS} = $pars{n}*$pars{dt};
  $pars{t1abs} = sprintf "%.9f", $pars{t0abs} + $pars{t0};
  $pars{t2abs} = sprintf "%.9f", $pars{t0abs} + $pars{t0} + $pars{timeS};
  close SIG;


  ############################################################
  ## Get some database parameters
  my ($g, $t);
  # generator parameters:
  $g = `$graphene get_prev drydemag_nmr_gen $pars{t0abs}`
    or die "Can't run graphene program: $!\n";
  ($t, $pars{fre}, $pars{exc}, $pars{exc_ph}, $pars{com}, $pars{com_ph}) = split /\s+/, $g;

  # temperature:
  $g = `$graphene get drydemag_temp $pars{t0abs}`
    or die "Can't run graphene program: $!\n";
  ($t, $pars{temp}) = split /\s+/, $g;

  # grad:
  $g = `$graphene get drydemag_sweep_grad $pars{t0abs}`
    or die "Can't run graphene program: $!\n";
  ($t, $pars{grad}) = split /\s+/, $g;

  # grad:
  $g = `$graphene get drydemag_sweep_quad $pars{t0abs}`
    or die "Can't run graphene program: $!\n";
  ($t, $pars{quad}) = split /\s+/, $g;

  # calclate fft frequency
  my $sfre = 1/$pars{dt}; # sampling freq
  my $m1 = $pars{fre} % $sfre;
  my $m2 = $pars{fre} % ($sfre/2);
  $pars{fre_fft} = ($m1<$sfre/2)? $m2 : $sfre/2-$m2;
  $pars{fre_sign} = ($m1<$sfre/2)? 1:-1;
  $pars{fmin} = $pars{fre_fft} - $pars{freq_span}/2;
  $pars{fmax} = $pars{fre_fft} + $pars{freq_span}/2;

  # get NMR data from the database
  ($pars{nmr_t}, $pars{nmr_i}, $pars{nmr_x},
   $pars{nmr_y}, $pars{nmr_a}, $pars{nmr_max}) =
    get_nmr($pars{t1abs}, $pars{t2abs}, 'auto', 'auto', $pars{nmr_ph});

  if ($#{$pars{nmr_i}} > -1) {
    my $i1 = ${$pars{nmr_i}}[0];
    my $i2 = ${$pars{nmr_i}}[$#{$pars{nmr_i}}];
    my $t1 = ${$pars{nmr_t}}[0];
    my $t2 = ${$pars{nmr_t}}[$#{$pars{nmr_t}}];
    $pars{didt} = ($i2-$i1)/($t2-$t1); # time to current
    $pars{dfdi} = 405.886*20378/(2*3.1415926); # current to freq
    $pars{dfdt} = $pars{didt}*$pars{dfdi}; # time to freq shift
  }
  $pars{nmr_auto_ph} = fix_phase($pars{nmr_x}, $pars{nmr_y}, $pars{nmr_a});

  ## Find exact frequency, get amplitude values
  my $cmd = $sig_filter .
        ($pars{tmin}   ? " -T $pars{tmin}":"") .
        ($pars{tmax}   ? " -U $pars{tmax}":"") .
        " -f fit \"$sig\"" .
        ($pars{fmin}   ? " -F $pars{fmin}":"") .
        ($pars{fmax}   ? " -G $pars{fmax}":"");
  do {
    my ($t, $fre, $tau, $amp, $ph) = split /\s+/,`$cmd`;
    # fix frequency
    print "  Fix FFT frequency: $pars{fre_fft} -> $fre\n";
    $pars{fre_fft} = $fre;
    $pars{fmin} = $pars{fre_fft} - $pars{freq_span}/2;
    $pars{fmax} = $pars{fre_fft} + $pars{freq_span}/2;
  };

  ## get CW data from the signal
  # for one channel, only amplitude can measured
  # (lock-in with fixed frequency is not accurate enough)
  $cmd= $sig_filter .
         ($pars{tmin}   ? " -T $pars{tmin}":"") .
         ($pars{tmax}   ? " -U $pars{tmax}":"") .
         " -f slockin \"$sig\"" .
         ($pars{fmin}   ? " -F $pars{fmin}":"") .
         ($pars{fmax}   ? " -G $pars{fmax}":"") .
         ($pars{sfft_win} ? " -w $pars{sfft_win}":"");

  if ($pars{ch}<2) { $cmd .= " -f $pars{fre_fft}"; }
  print "  Get sfft amplitude:\n";
  $pars{sfft_max} = 0;
  foreach (split /\n/, `$cmd`){
    my ($t,$x,$y) = split /\s+/;
    push @{$pars{sfft_t}}, $t;
    push @{$pars{sfft_x}}, $x;
    push @{$pars{sfft_y}}, $y;
    my $a = sqrt($x*$x+$y*$y);
    $pars{sfft_max} = $a if $pars{sfft_max} < $a;
    push @{$pars{sfft_a}}, $a;
  }
  $pars{sfft_auto_ph} = fix_phase($pars{sfft_x}, $pars{sfft_y}, $pars{sfft_a});



  ############################################################
  ## Save parameters
  my $inf = $sig; $inf=~s/\.sigf?$//; $inf.='.inf';
  open INF, "> $inf" or die "can't open file: $inf: $!\n";
  print INF JSON->new->pretty->canonical->utf8->encode(\%pars);
  close INF;

}
